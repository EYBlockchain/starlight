from "ecc/babyjubjubParams" import main as curveParams
from "ecc/edwardsScalarMult" import main as scalarMult
from "ecc/edwardsCompress" import main as edwardsCompress
from "utils/pack/bool/pack256.zok" import main as bool_256_to_field
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "hashes/poseidon/poseidon.zok" import main as poseidon
from "./common/merkle-tree/sparse-merkle-tree/checkproof.zok" import main as checkproof
from "./common/merkle-tree/sparse-merkle-tree/checkproof.zok" import checkUpdatedPath as checkUpdatedPath
from "./common/merkle-tree/mimc/altbn254/verify-membership/height32.zok" import main as checkRoot
from "./common/hashes/mimc/altbn254/mimc2.zok" import main as mimc2

def main(\
	private field value,\
	public field index,\
	private field a_oldCommitment_owner_secretKey,\
	public field nullifierRoot,\
	public field newNullifierRoot,\
	public field a_oldCommitment_nullifier,\
	private field[32] a_nullifier_nonmembershipWitness_siblingPath,\
	private field[32] a_nullifier_nonmembershipWitness_newsiblingPath,\
	private  field a_oldCommitment_value,\
	private field a_oldCommitment_salt,\
	private bool a_oldCommitment_isDummy,\
	public field commitmentRoot,\
	private field a_oldCommitment_membershipWitness_index,\
	private field[32] a_oldCommitment_membershipWitness_siblingPath,\
	private field a_newCommitment_owner_publicKey,\
	private field a_newCommitment_salt,\
	public field a_newCommitment_commitment,\
	private field b_index_1_oldCommitment_owner_secretKey,\
	public field b_index_1_oldCommitment_nullifier,\
	private field[32] b_index_1_nullifier_nonmembershipWitness_siblingPath,\
	private field[32] b_index_1_nullifier_nonmembershipWitness_newsiblingPath,\
	private  field b_index_1_oldCommitment_value,\
	private field b_index_1_oldCommitment_salt,\
	private bool b_index_1_oldCommitment_isDummy,\
	private field b_index_1_oldCommitment_membershipWitness_index,\
	private field[32] b_index_1_oldCommitment_membershipWitness_siblingPath,\
	private field b_index_1_newCommitment_owner_publicKey,\
	private field b_index_1_newCommitment_salt,\
	public field b_index_1_newCommitment_commitment,\
	private field b_index_3_oldCommitment_owner_secretKey,\
	public field b_index_3_oldCommitment_nullifier,\
	private field[32] b_index_3_nullifier_nonmembershipWitness_siblingPath,\
	private field[32] b_index_3_nullifier_nonmembershipWitness_newsiblingPath,\
	private  field b_index_3_oldCommitment_value,\
	private field b_index_3_oldCommitment_salt,\
	private bool b_index_3_oldCommitment_isDummy,\
	private field b_index_3_oldCommitment_membershipWitness_index,\
	private field[32] b_index_3_oldCommitment_membershipWitness_siblingPath,\
	private field b_index_3_newCommitment_owner_publicKey,\
	private field b_index_3_newCommitment_salt,\
	public field b_index_3_newCommitment_commitment\
) -> (bool):

        
        // We need to hard-code each stateVarId into the circuit:
        field a_stateVarId_field = 3


        field a = a_oldCommitment_value


        // We need to hard-code the mappingId's of mappings into the circuit:
        field b_mappingId = 6


        field b_index_1 = b_index_1_oldCommitment_value


        field b_index_3 = b_index_3_oldCommitment_value


        field index_init = index


        field index_1 = index + 1

index = index_1

b_index_1 = index_1


        field index_3 = index + 1

index = index_3


        field index_2 = index

a = a + index_2

index_3 = index + 1

index = index_3

b_index_3 = value

index = index_init


        // a_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] a_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(a_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool a_oldCommitment_owner_publicKey_sign = edwardsCompress(a_oldCommitment_owner_publicKey_point)[0]

        bool[254] a_oldCommitment_yBits = field_to_bool_256(a_oldCommitment_owner_publicKey_point[1])[2..256]
        a_oldCommitment_yBits[0] = a_oldCommitment_owner_publicKey_sign

        field a_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...a_oldCommitment_yBits])


        // Nullify a:

        field a_oldCommitment_nullifier_check_field = poseidon([\
          a_stateVarId_field,\
          a_oldCommitment_owner_secretKey,\
          a_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(a_oldCommitment_nullifier)[8..256] == field_to_bool_256(a_oldCommitment_nullifier_check_field)[8..256]\
        )
        // a_oldCommitment_nullifier : non-existence check
        
        assert(\
          nullifierRoot == checkproof(\
            a_nullifier_nonmembershipWitness_siblingPath,\
            a_oldCommitment_nullifier\
           )       )

       assert(\
        newNullifierRoot == checkUpdatedPath(\
          a_nullifier_nonmembershipWitness_newsiblingPath,\
          a_oldCommitment_nullifier\
        )        )

        



        // prepare secret state 'a' for commitment

          field a_oldCommitment_value_field = a_oldCommitment_value
          
        // a_oldCommitment_commitment: preimage check


        field a_oldCommitment_commitment_field = poseidon([\
          a_stateVarId_field,\
          a_oldCommitment_value_field,\
          a_oldCommitment_owner_publicKey,\
          a_oldCommitment_salt        ])


        // a_oldCommitment_commitment: existence check


        field a_commitmentRoot_check = checkRoot(\
          a_oldCommitment_membershipWitness_siblingPath,\
          a_oldCommitment_commitment_field,\
          a_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        a_commitmentRoot_check = if a_oldCommitment_isDummy == true then commitmentRoot else a_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(a_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'a' for commitment

        field a_newCommitment_value_field = a

        // a_newCommitment_commitment - preimage check

        field a_newCommitment_commitment_check_field = poseidon([\
          a_stateVarId_field,\
          a_newCommitment_value_field,\
          a_newCommitment_owner_publicKey,\
          a_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(a_newCommitment_commitment)[8..256] == field_to_bool_256(a_newCommitment_commitment_check_field)[8..256]\
        )


        field b_index_1_stateVarId_field = mimc2([b_mappingId, index_1])


        // b_index_1_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] b_index_1_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(b_index_1_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool b_index_1_oldCommitment_owner_publicKey_sign = edwardsCompress(b_index_1_oldCommitment_owner_publicKey_point)[0]

        bool[254] b_index_1_oldCommitment_yBits = field_to_bool_256(b_index_1_oldCommitment_owner_publicKey_point[1])[2..256]
        b_index_1_oldCommitment_yBits[0] = b_index_1_oldCommitment_owner_publicKey_sign

        field b_index_1_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...b_index_1_oldCommitment_yBits])


        // Nullify b_index_1:

        field b_index_1_oldCommitment_nullifier_check_field = poseidon([\
          b_index_1_stateVarId_field,\
          b_index_1_oldCommitment_owner_secretKey,\
          b_index_1_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(b_index_1_oldCommitment_nullifier)[8..256] == field_to_bool_256(b_index_1_oldCommitment_nullifier_check_field)[8..256]\
        )
        // b_index_1_oldCommitment_nullifier : non-existence check
        
        assert(\
          nullifierRoot == checkproof(\
            b_index_1_nullifier_nonmembershipWitness_siblingPath,\
            b_index_1_oldCommitment_nullifier\
           )       )

       assert(\
        newNullifierRoot == checkUpdatedPath(\
          b_index_1_nullifier_nonmembershipWitness_newsiblingPath,\
          b_index_1_oldCommitment_nullifier\
        )        )

        



        // prepare secret state 'b_index_1' for commitment

          field b_index_1_oldCommitment_value_field = b_index_1_oldCommitment_value
          
        // b_index_1_oldCommitment_commitment: preimage check


        field b_index_1_oldCommitment_commitment_field = poseidon([\
          b_index_1_stateVarId_field,\
          b_index_1_oldCommitment_value_field,\
          b_index_1_oldCommitment_owner_publicKey,\
          b_index_1_oldCommitment_salt        ])


        // b_index_1_oldCommitment_commitment: existence check


        field b_index_1_commitmentRoot_check = checkRoot(\
          b_index_1_oldCommitment_membershipWitness_siblingPath,\
          b_index_1_oldCommitment_commitment_field,\
          b_index_1_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        b_index_1_commitmentRoot_check = if b_index_1_oldCommitment_isDummy == true then commitmentRoot else b_index_1_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(b_index_1_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'b_index_1' for commitment

        field b_index_1_newCommitment_value_field = b_index_1

        // b_index_1_newCommitment_commitment - preimage check

        field b_index_1_newCommitment_commitment_check_field = poseidon([\
          b_index_1_stateVarId_field,\
          b_index_1_newCommitment_value_field,\
          b_index_1_newCommitment_owner_publicKey,\
          b_index_1_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(b_index_1_newCommitment_commitment)[8..256] == field_to_bool_256(b_index_1_newCommitment_commitment_check_field)[8..256]\
        )


        field b_index_3_stateVarId_field = mimc2([b_mappingId, index_3])


        // b_index_3_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] b_index_3_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(b_index_3_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool b_index_3_oldCommitment_owner_publicKey_sign = edwardsCompress(b_index_3_oldCommitment_owner_publicKey_point)[0]

        bool[254] b_index_3_oldCommitment_yBits = field_to_bool_256(b_index_3_oldCommitment_owner_publicKey_point[1])[2..256]
        b_index_3_oldCommitment_yBits[0] = b_index_3_oldCommitment_owner_publicKey_sign

        field b_index_3_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...b_index_3_oldCommitment_yBits])


        // Nullify b_index_3:

        field b_index_3_oldCommitment_nullifier_check_field = poseidon([\
          b_index_3_stateVarId_field,\
          b_index_3_oldCommitment_owner_secretKey,\
          b_index_3_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(b_index_3_oldCommitment_nullifier)[8..256] == field_to_bool_256(b_index_3_oldCommitment_nullifier_check_field)[8..256]\
        )
        // b_index_3_oldCommitment_nullifier : non-existence check
        
        assert(\
          nullifierRoot == checkproof(\
            b_index_3_nullifier_nonmembershipWitness_siblingPath,\
            b_index_3_oldCommitment_nullifier\
           )       )

       assert(\
        newNullifierRoot == checkUpdatedPath(\
          b_index_3_nullifier_nonmembershipWitness_newsiblingPath,\
          b_index_3_oldCommitment_nullifier\
        )        )

        



        // prepare secret state 'b_index_3' for commitment

          field b_index_3_oldCommitment_value_field = b_index_3_oldCommitment_value
          
        // b_index_3_oldCommitment_commitment: preimage check


        field b_index_3_oldCommitment_commitment_field = poseidon([\
          b_index_3_stateVarId_field,\
          b_index_3_oldCommitment_value_field,\
          b_index_3_oldCommitment_owner_publicKey,\
          b_index_3_oldCommitment_salt        ])


        // b_index_3_oldCommitment_commitment: existence check


        field b_index_3_commitmentRoot_check = checkRoot(\
          b_index_3_oldCommitment_membershipWitness_siblingPath,\
          b_index_3_oldCommitment_commitment_field,\
          b_index_3_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        b_index_3_commitmentRoot_check = if b_index_3_oldCommitment_isDummy == true then commitmentRoot else b_index_3_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(b_index_3_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'b_index_3' for commitment

        field b_index_3_newCommitment_value_field = b_index_3

        // b_index_3_newCommitment_commitment - preimage check

        field b_index_3_newCommitment_commitment_check_field = poseidon([\
          b_index_3_stateVarId_field,\
          b_index_3_newCommitment_value_field,\
          b_index_3_newCommitment_owner_publicKey,\
          b_index_3_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(b_index_3_newCommitment_commitment)[8..256] == field_to_bool_256(b_index_3_newCommitment_commitment_check_field)[8..256]\
        )

         return true
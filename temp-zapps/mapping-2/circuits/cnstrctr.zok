from "hashes/sha256/sha256Padded.zok" import sha256Padded as sha256Padded
from "utils/casts/u32_8_to_bool_256.zok" import main as u32_8_to_bool_256
from "hashes/poseidon/poseidon.zok" import main as poseidon
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "./common/casts/u32_array_to_field.zok" import main as u32_array_to_field
from "utils/pack/bool/pack256.zok" import main as bool_256_to_field
from "./common/merkle-tree/mimc/altbn254/verify-membership/height32.zok" import main as checkRoot

def main(\
	public field msg,\
	private u32[8] admin_oldCommitment_owner_secretKey,\
	public field admin_oldCommitment_nullifier,\
	private  field admin_oldCommitment_value,\
	private field admin_oldCommitment_salt_field,\
	private bool admin_oldCommitment_isDummy,\
	public field commitmentRoot,\
	private field admin_oldCommitment_membershipWitness_index,\
	private field[32] admin_oldCommitment_membershipWitness_siblingPath,\
	private field admin_newCommitment_owner_publicKey_field,\
	private field admin_newCommitment_salt_field,\
	public field admin_newCommitment_commitment,\
	private u32[8] gamer_oldCommitment_owner_secretKey,\
	public field gamer_oldCommitment_nullifier,\
	private  field gamer_oldCommitment_value,\
	private field gamer_oldCommitment_salt_field,\
	private bool gamer_oldCommitment_isDummy,\
	private field gamer_oldCommitment_membershipWitness_index,\
	private field[32] gamer_oldCommitment_membershipWitness_siblingPath,\
	private field gamer_newCommitment_owner_publicKey_field,\
	private field gamer_newCommitment_salt_field,\
	public field gamer_newCommitment_commitment\
) -> (bool):

        
        // We need to hard-code each stateVarId into the circuit:
        field admin_stateVarId_field = 7


        field admin = admin_oldCommitment_value


        // We need to hard-code each stateVarId into the circuit:
        field gamer_stateVarId_field = 9


        field gamer = gamer_oldCommitment_value

admin = msg

gamer = msg


        // admin_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        u32[8] admin_oldCommitment_owner_publicKey = sha256Padded(u32_8_to_bool_256(admin_oldCommitment_owner_secretKey))


        // Nullify admin:

        field admin_oldCommitment_owner_secretKey_field =u32_array_to_field(admin_oldCommitment_owner_secretKey)

        field admin_oldCommitment_nullifier_check_field = poseidon([\
          admin_stateVarId_field,\
          admin_oldCommitment_owner_secretKey_field,\
          admin_oldCommitment_salt_field\
        ])

        assert(\
        field_to_bool_256(admin_oldCommitment_nullifier)[8..256] == field_to_bool_256(admin_oldCommitment_nullifier_check_field)[8..256]\
        )


        // admin_oldCommitment_commitment: preimage check

        field admin_oldCommitment_owner_publicKey_field =u32_array_to_field(admin_oldCommitment_owner_publicKey)


        field admin_oldCommitment_commitment_field = poseidon([\
          admin_stateVarId_field,\
          admin_oldCommitment_value,\
          admin_oldCommitment_owner_publicKey_field,\
          admin_oldCommitment_salt_field\
        ])


        // admin_oldCommitment_commitment: existence check


        field admin_commitmentRoot_check = checkRoot(\
          admin_oldCommitment_membershipWitness_siblingPath,\
          admin_oldCommitment_commitment_field,\
          admin_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        admin_commitmentRoot_check = if admin_oldCommitment_isDummy == true then commitmentRoot else admin_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(admin_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'admin' for commitment

        field admin_newCommitment_value_field = admin

        // admin_newCommitment_commitment - preimage check

        field admin_newCommitment_commitment_check_field = poseidon([\
          admin_stateVarId_field,\
          admin_newCommitment_value_field,\
          admin_newCommitment_owner_publicKey_field,\
          admin_newCommitment_salt_field\
        ])

        assert(\
          field_to_bool_256(admin_newCommitment_commitment)[8..256] == field_to_bool_256(admin_newCommitment_commitment_check_field)[8..256]\
        )


        // gamer_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        u32[8] gamer_oldCommitment_owner_publicKey = sha256Padded(u32_8_to_bool_256(gamer_oldCommitment_owner_secretKey))


        // Nullify gamer:

        field gamer_oldCommitment_owner_secretKey_field =u32_array_to_field(gamer_oldCommitment_owner_secretKey)

        field gamer_oldCommitment_nullifier_check_field = poseidon([\
          gamer_stateVarId_field,\
          gamer_oldCommitment_owner_secretKey_field,\
          gamer_oldCommitment_salt_field\
        ])

        assert(\
        field_to_bool_256(gamer_oldCommitment_nullifier)[8..256] == field_to_bool_256(gamer_oldCommitment_nullifier_check_field)[8..256]\
        )


        // gamer_oldCommitment_commitment: preimage check

        field gamer_oldCommitment_owner_publicKey_field =u32_array_to_field(gamer_oldCommitment_owner_publicKey)


        field gamer_oldCommitment_commitment_field = poseidon([\
          gamer_stateVarId_field,\
          gamer_oldCommitment_value,\
          gamer_oldCommitment_owner_publicKey_field,\
          gamer_oldCommitment_salt_field\
        ])


        // gamer_oldCommitment_commitment: existence check


        field gamer_commitmentRoot_check = checkRoot(\
          gamer_oldCommitment_membershipWitness_siblingPath,\
          gamer_oldCommitment_commitment_field,\
          gamer_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        gamer_commitmentRoot_check = if gamer_oldCommitment_isDummy == true then commitmentRoot else gamer_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(gamer_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'gamer' for commitment

        field gamer_newCommitment_value_field = gamer

        // gamer_newCommitment_commitment - preimage check

        field gamer_newCommitment_commitment_check_field = poseidon([\
          gamer_stateVarId_field,\
          gamer_newCommitment_value_field,\
          gamer_newCommitment_owner_publicKey_field,\
          gamer_newCommitment_salt_field\
        ])

        assert(\
          field_to_bool_256(gamer_newCommitment_commitment)[8..256] == field_to_bool_256(gamer_newCommitment_commitment_check_field)[8..256]\
        )

         return true
        
from "./common/hashes/mimc/altbn254/mimc2.zok" import main as mimc2
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "hashes/poseidon/poseidon.zok" import main as poseidon
from "ecc/babyjubjubParams" import BabyJubJubParams
from "ecc/babyjubjubParams" import main as curveParams
from "ecc/edwardsScalarMult" import main as scalarMult
from "ecc/edwardsCompress" import main as edwardsCompress
from "utils/pack/bool/pack256.zok" import main as bool_256_to_field
from "utils/casts/u32_to_field" import main as u32_to_field
from "./common/encryption/kem-dem.zok" import main as enc
from "./common/encryption/kem-dem.zok" import EncryptedMsgs as EncryptedMsgs

def main(\
	private field param2,\
	private field msgSender,\
	private field a_msgSender_0_newCommitment_salt,\
	public field a_msgSender_0_newCommitment_commitment,\
	private field a_msgSender_0_newCommitment_ephSecretKey,\
	private field[2] a_msgSender_0_newCommitment_owner_publicKey_point\
) -> (EncryptedMsgs<3>):

        
        // We need to hard-code the mappingId's of mappings into the circuit:
        field a_mappingId = 5


        // calculate a_msgSender_0_newCommitment_owner_publicKey from its point
        bool a_msgSender_0_newCommitment_owner_publicKey_sign = edwardsCompress(a_msgSender_0_newCommitment_owner_publicKey_point)[0]

        bool[254] a_msgSender_0_newCommitment_yBits = field_to_bool_256(a_msgSender_0_newCommitment_owner_publicKey_point[1])[2..256]
        a_msgSender_0_newCommitment_yBits[0] = a_msgSender_0_newCommitment_owner_publicKey_sign

        field a_msgSender_0_newCommitment_owner_publicKey = bool_256_to_field([false, false, ...a_msgSender_0_newCommitment_yBits])

// Skipping incrementation of a_msg


        field a_msgSender_0_stateVarId_field = mimc2([a_mappingId, msgSender])


        field a_msgSender_1_stateVarId_field = mimc2([a_mappingId, msgSender])


        // prepare secret state 'a_msgSender_0' for commitment

        field a_msgSender_0_newCommitment_value_field = param2

        // a_msgSender_0_newCommitment_commitment - preimage check

        field a_msgSender_0_newCommitment_commitment_check_field = poseidon([\
          a_msgSender_0_stateVarId_field,\
          a_msgSender_0_newCommitment_value_field,\
          a_msgSender_0_newCommitment_owner_publicKey,\
          a_msgSender_0_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(a_msgSender_0_newCommitment_commitment)[8..256] == field_to_bool_256(a_msgSender_0_newCommitment_commitment_check_field)[8..256]\
        )


        // a_msgSender_0_newCommitment encryption for owner

        EncryptedMsgs<3> a_msgSender_0_cipherText = enc(\
            field_to_bool_256(a_msgSender_0_newCommitment_ephSecretKey),\
            a_msgSender_0_newCommitment_owner_publicKey_point,\
            [\
              a_msgSender_0_stateVarId_field,\
              a_msgSender_0_newCommitment_value_field,\
              a_msgSender_0_newCommitment_salt\
            ])

         return a_msgSender_0_cipherText
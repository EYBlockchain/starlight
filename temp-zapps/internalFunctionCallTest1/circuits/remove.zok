from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "utils/casts/u32_8_to_bool_256.zok" import main as u32_8_to_bool_256
from "hashes/poseidon/poseidon.zok" import main as poseidon
from "./common/casts/u32_array_to_field.zok" import main as u32_array_to_field
from "./addB.zok" import main as addB 
from "./addA.zok" import main as addA 

def main(\
	public field value,\
	public field value1,\
	private field b_0_newCommitment_owner_publicKey_field,\
	private field b_0_newCommitment_salt_field,\
	public field b_0_newCommitment_commitment,\
	private u32[8] a_oldCommitment_owner_secretKey,\
	public field a_oldCommitment_nullifier,\
	private  field a_oldCommitment_value,\
	private field a_oldCommitment_salt_field,\
	private bool a_oldCommitment_isDummy,\
	public field commitmentRoot,\
	private field a_oldCommitment_membershipWitness_index,\
	private field[32] a_oldCommitment_membershipWitness_siblingPath,\
	private field a_newCommitment_owner_publicKey_field,\
	private field a_newCommitment_salt_field,\
	public field a_newCommitment_commitment,\
	public field value11\
) -> (bool):

        
        // We need to hard-code each stateVarId into the circuit:
        field b_0_stateVarId_field = 5

// Skipping incrementation of b

assert(addB(value,\
 	a_oldCommitment_owner_secretKey,\
 	a_oldCommitment_nullifier,\
 	a_oldCommitment_value,\
 	a_oldCommitment_salt_field,\
 	a_oldCommitment_isDummy,\
 	commitmentRoot,\
 	a_oldCommitment_membershipWitness_index,\
 	a_oldCommitment_membershipWitness_siblingPath,\
 	a_newCommitment_owner_publicKey_field,\
 	a_newCommitment_salt_field,\
 	a_newCommitment_commitment)) 

assert(addA(value11,\
 	a_oldCommitment_owner_secretKey,\
 	a_oldCommitment_nullifier,\
 	a_oldCommitment_value,\
 	a_oldCommitment_salt_field,\
 	a_oldCommitment_isDummy,\
 	commitmentRoot,\
 	a_oldCommitment_membershipWitness_index,\
 	a_oldCommitment_membershipWitness_siblingPath,\
 	a_newCommitment_owner_publicKey_field,\
 	a_newCommitment_salt_field,\
 	a_newCommitment_commitment)) 


        // prepare secret state 'b_0' for commitment

        field b_0_newCommitment_value_field = value

        // b_0_newCommitment_commitment - preimage check

        field b_0_newCommitment_commitment_check_field = poseidon([\
          b_0_stateVarId_field,\
          b_0_newCommitment_value_field,\
          b_0_newCommitment_owner_publicKey_field,\
          b_0_newCommitment_salt_field\
        ])

        assert(\
          field_to_bool_256(b_0_newCommitment_commitment)[8..256] == field_to_bool_256(b_0_newCommitment_commitment_check_field)[8..256]\
        )

         return true
        
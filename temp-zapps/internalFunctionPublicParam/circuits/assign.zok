from "hashes/sha256/sha256Padded.zok" import sha256Padded as sha256Padded
from "utils/casts/u32_8_to_bool_256.zok" import main as u32_8_to_bool_256
from "hashes/poseidon/poseidon.zok" import main as poseidon
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "./common/casts/u32_array_to_field.zok" import main as u32_array_to_field
from "utils/pack/bool/pack256.zok" import main as bool_256_to_field
from "./common/merkle-tree/mimc/altbn254/verify-membership/height32.zok" import main as checkRoot

def main(\
	private field value,\
	private u32[8] x_oldCommitment_owner_secretKey,\
	public field x_oldCommitment_nullifier,\
	private  field x_oldCommitment_value,\
	private field x_oldCommitment_salt_field,\
	private bool x_oldCommitment_isDummy,\
	public field commitmentRoot,\
	private field x_oldCommitment_membershipWitness_index,\
	private field[32] x_oldCommitment_membershipWitness_siblingPath,\
	private field x_newCommitment_owner_publicKey_field,\
	private field x_newCommitment_salt_field,\
	public field x_newCommitment_commitment\
) -> (bool):

        
        // We need to hard-code each stateVarId into the circuit:
        field x_stateVarId_field = 3


        field x = x_oldCommitment_value

		field y = value ** 2

x = y


        // x_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        u32[8] x_oldCommitment_owner_publicKey = sha256Padded(u32_8_to_bool_256(x_oldCommitment_owner_secretKey))


        // Nullify x:

        field x_oldCommitment_owner_secretKey_field =u32_array_to_field(x_oldCommitment_owner_secretKey)

        field x_oldCommitment_nullifier_check_field = poseidon([\
          x_stateVarId_field,\
          x_oldCommitment_owner_secretKey_field,\
          x_oldCommitment_salt_field\
        ])

        assert(\
        field_to_bool_256(x_oldCommitment_nullifier)[8..256] == field_to_bool_256(x_oldCommitment_nullifier_check_field)[8..256]\
        )


        // x_oldCommitment_commitment: preimage check

        field x_oldCommitment_owner_publicKey_field =u32_array_to_field(x_oldCommitment_owner_publicKey)


        field x_oldCommitment_commitment_field = poseidon([\
          x_stateVarId_field,\
          x_oldCommitment_value,\
          x_oldCommitment_owner_publicKey_field,\
          x_oldCommitment_salt_field\
        ])


        // x_oldCommitment_commitment: existence check


        field x_commitmentRoot_check = checkRoot(\
          x_oldCommitment_membershipWitness_siblingPath,\
          x_oldCommitment_commitment_field,\
          x_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        x_commitmentRoot_check = if x_oldCommitment_isDummy == true then commitmentRoot else x_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(x_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'x' for commitment

        field x_newCommitment_value_field = x

        // x_newCommitment_commitment - preimage check

        field x_newCommitment_commitment_check_field = poseidon([\
          x_stateVarId_field,\
          x_newCommitment_value_field,\
          x_newCommitment_owner_publicKey_field,\
          x_newCommitment_salt_field\
        ])

        assert(\
          field_to_bool_256(x_newCommitment_commitment)[8..256] == field_to_bool_256(x_newCommitment_commitment_check_field)[8..256]\
        )

         return true
        
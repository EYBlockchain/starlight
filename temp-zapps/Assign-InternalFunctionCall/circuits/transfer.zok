from "./common/hashes/mimc/altbn254/mimc2.zok" import main as mimc2
from "ecc/babyjubjubParams" import main as curveParams
from "ecc/edwardsScalarMult" import main as scalarMult
from "ecc/edwardsCompress" import main as edwardsCompress
from "utils/pack/bool/pack256.zok" import main as bool_256_to_field
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "hashes/poseidon/poseidon.zok" import main as poseidon
from "./common/merkle-tree/sparse-merkle-tree/checkproof.zok" import main as checkproof
from "./common/merkle-tree/sparse-merkle-tree/checkproof.zok" import checkUpdatedPath as checkUpdatedPath
from "./common/merkle-tree/mimc/altbn254/verify-membership/height32.zok" import main as checkRoot
from "./deposit.zok" import main as deposit 

def main(\
	private field fromAccountId,\
	private field toAccountId,\
	private field amount,\
	private field account_fromAccountId_oldCommitment_owner_secretKey,\
	public field nullifierRoot,\
	public field newNullifierRoot,\
	public field account_fromAccountId_oldCommitment_nullifier,\
	private field[32] account_fromAccountId_nullifier_nonmembershipWitness_siblingPath,\
	private field[32] account_fromAccountId_nullifier_nonmembershipWitness_newsiblingPath,\
	private  field account_fromAccountId_oldCommitment_value,\
	private field account_fromAccountId_oldCommitment_salt,\
	private bool account_fromAccountId_oldCommitment_isDummy,\
	public field commitmentRoot,\
	private field account_fromAccountId_oldCommitment_membershipWitness_index,\
	private field[32] account_fromAccountId_oldCommitment_membershipWitness_siblingPath,\
	private field account_fromAccountId_newCommitment_owner_publicKey,\
	private field account_fromAccountId_newCommitment_salt,\
	public field account_fromAccountId_newCommitment_commitment,\
	private field account_toAccountId_oldCommitment_owner_secretKey,\
	public field account_toAccountId_oldCommitment_nullifier,\
	private field[32] account_toAccountId_nullifier_nonmembershipWitness_siblingPath,\
	private field[32] account_toAccountId_nullifier_nonmembershipWitness_newsiblingPath,\
	private  field account_toAccountId_oldCommitment_value,\
	private field account_toAccountId_oldCommitment_salt,\
	private bool account_toAccountId_oldCommitment_isDummy,\
	private field account_toAccountId_oldCommitment_membershipWitness_index,\
	private field[32] account_toAccountId_oldCommitment_membershipWitness_siblingPath,\
	private field account_toAccountId_newCommitment_owner_publicKey,\
	private field account_toAccountId_newCommitment_salt,\
	public field account_toAccountId_newCommitment_commitment\
) -> (bool):

        
        // We need to hard-code the mappingId's of mappings into the circuit:
        field account_mappingId = 5


        field account_fromAccountId = account_fromAccountId_oldCommitment_value

account_fromAccountId = account_fromAccountId - amount

assert(deposit(amount,\
 	toAccountId,\
 	account_toAccountId_oldCommitment_owner_secretKey,\
 	nullifierRoot,\
 	newNullifierRoot,\
 	account_toAccountId_oldCommitment_nullifier,\
 	account_toAccountId_nullifier_nonmembershipWitness_siblingPath,\
 	account_toAccountId_nullifier_nonmembershipWitness_newsiblingPath,\
 	account_toAccountId_oldCommitment_value,\
 	account_toAccountId_oldCommitment_salt,\
 	account_toAccountId_oldCommitment_isDummy,\
 	commitmentRoot,\
 	account_toAccountId_oldCommitment_membershipWitness_index,\
 	account_toAccountId_oldCommitment_membershipWitness_siblingPath,\
 	account_toAccountId_newCommitment_owner_publicKey,\
 	account_toAccountId_newCommitment_salt,\
 	account_toAccountId_newCommitment_commitment)) 


        field account_fromAccountId_stateVarId_field = mimc2([account_mappingId, fromAccountId])


        // account_fromAccountId_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] account_fromAccountId_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(account_fromAccountId_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool account_fromAccountId_oldCommitment_owner_publicKey_sign = edwardsCompress(account_fromAccountId_oldCommitment_owner_publicKey_point)[0]

        bool[254] account_fromAccountId_oldCommitment_yBits = field_to_bool_256(account_fromAccountId_oldCommitment_owner_publicKey_point[1])[2..256]
        account_fromAccountId_oldCommitment_yBits[0] = account_fromAccountId_oldCommitment_owner_publicKey_sign

        field account_fromAccountId_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...account_fromAccountId_oldCommitment_yBits])


        // Nullify account_fromAccountId:

        field account_fromAccountId_oldCommitment_nullifier_check_field = poseidon([\
          account_fromAccountId_stateVarId_field,\
          account_fromAccountId_oldCommitment_owner_secretKey,\
          account_fromAccountId_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(account_fromAccountId_oldCommitment_nullifier)[8..256] == field_to_bool_256(account_fromAccountId_oldCommitment_nullifier_check_field)[8..256]\
        )
        // account_fromAccountId_oldCommitment_nullifier : non-existence check
        
        assert(\
          nullifierRoot == checkproof(\
            account_fromAccountId_nullifier_nonmembershipWitness_siblingPath,\
            account_fromAccountId_oldCommitment_nullifier\
           )       )

       assert(\
        newNullifierRoot == checkUpdatedPath(\
          account_fromAccountId_nullifier_nonmembershipWitness_newsiblingPath,\
          account_fromAccountId_oldCommitment_nullifier\
        )        )

        



        // prepare secret state 'account_fromAccountId' for commitment

          field account_fromAccountId_oldCommitment_value_field = account_fromAccountId_oldCommitment_value
          
        // account_fromAccountId_oldCommitment_commitment: preimage check


        field account_fromAccountId_oldCommitment_commitment_field = poseidon([\
          account_fromAccountId_stateVarId_field,\
          account_fromAccountId_oldCommitment_value_field,\
          account_fromAccountId_oldCommitment_owner_publicKey,\
          account_fromAccountId_oldCommitment_salt        ])


        // account_fromAccountId_oldCommitment_commitment: existence check


        field account_fromAccountId_commitmentRoot_check = checkRoot(\
          account_fromAccountId_oldCommitment_membershipWitness_siblingPath,\
          account_fromAccountId_oldCommitment_commitment_field,\
          account_fromAccountId_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        account_fromAccountId_commitmentRoot_check = if account_fromAccountId_oldCommitment_isDummy == true then commitmentRoot else account_fromAccountId_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(account_fromAccountId_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'account_fromAccountId' for commitment

        field account_fromAccountId_newCommitment_value_field = account_fromAccountId

        // account_fromAccountId_newCommitment_commitment - preimage check

        field account_fromAccountId_newCommitment_commitment_check_field = poseidon([\
          account_fromAccountId_stateVarId_field,\
          account_fromAccountId_newCommitment_value_field,\
          account_fromAccountId_newCommitment_owner_publicKey,\
          account_fromAccountId_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(account_fromAccountId_newCommitment_commitment)[8..256] == field_to_bool_256(account_fromAccountId_newCommitment_commitment_check_field)[8..256]\
        )

         return true
from "./common/hashes/mimc/altbn254/mimc2.zok" import main as mimc2
from "ecc/babyjubjubParams" import main as curveParams
from "ecc/edwardsScalarMult" import main as scalarMult
from "ecc/edwardsCompress" import main as edwardsCompress
from "utils/pack/bool/pack256.zok" import main as bool_256_to_field
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "./common/hashes/poseidon/poseidon.zok" import main as poseidon
from "./common/merkle-tree/sparse-merkle-tree/checkproof.zok" import main as checkproof
from "./common/merkle-tree/sparse-merkle-tree/checkproof.zok" import checkUpdatedPath as checkUpdatedPath
from "./common/merkle-tree/mimc/altbn254/verify-membership/height32.zok" import main as checkRoot

struct swapStruct {
        field swapAmountSent
field swapAmountRecieved
field swapTokenSent
field swapTokenRecieved
      }

def main(\
	private field sharedAddress,\
	private field amountSent,\
	private field tokenIdSent,\
	private field amountRecieved,\
	private field tokenIdRecieved,\
	private field msgSender,\
	private field balances_msgSender_0_oldCommitment_owner_secretKey,\
	private field balances_msgSender_1_oldCommitment_owner_secretKey,\
	public field nullifierRoot,\
	public field newNullifierRoot,\
	public field balances_msgSender_0_oldCommitment_nullifier,\
	private field[32] balances_msgSender_0_nullifier_nonmembershipWitness_siblingPath,\
	private field[32] balances_msgSender_0_nullifier_nonmembershipWitness_newsiblingPath,\
	public field balances_msgSender_1_oldCommitment_nullifier,\
	private field[32] balances_msgSender_1_nullifier_nonmembershipWitness_siblingPath,\
	private field[32] balances_msgSender_1_nullifier_nonmembershipWitness_newsiblingPath,\
	private  field balances_msgSender_0_oldCommitment_value,\
	private field balances_msgSender_0_oldCommitment_salt,\
	private  field balances_msgSender_1_oldCommitment_value,\
	private field balances_msgSender_1_oldCommitment_salt,\
	public field commitmentRoot,\
	private field balances_msgSender_0_oldCommitment_membershipWitness_index,\
	private field[32] balances_msgSender_0_oldCommitment_membershipWitness_siblingPath,\
	private field balances_msgSender_1_oldCommitment_membershipWitness_index,\
	private field[32] balances_msgSender_1_oldCommitment_membershipWitness_siblingPath,\
	private field balances_msgSender_2_newCommitment_owner_publicKey,\
	private field balances_msgSender_2_newCommitment_salt,\
	public field balances_msgSender_2_newCommitment_commitment,\
	private field tokenOwners_tokenIdSent_oldCommitment_owner_secretKey,\
	public field tokenOwners_tokenIdSent_oldCommitment_nullifier,\
	private field[32] tokenOwners_tokenIdSent_nullifier_nonmembershipWitness_siblingPath,\
	private field[32] tokenOwners_tokenIdSent_nullifier_nonmembershipWitness_newsiblingPath,\
	private  field tokenOwners_tokenIdSent_oldCommitment_value,\
	private field tokenOwners_tokenIdSent_oldCommitment_salt,\
	private bool tokenOwners_tokenIdSent_oldCommitment_isDummy,\
	private field tokenOwners_tokenIdSent_oldCommitment_membershipWitness_index,\
	private field[32] tokenOwners_tokenIdSent_oldCommitment_membershipWitness_siblingPath,\
	private field tokenOwners_tokenIdSent_newCommitment_owner_publicKey,\
	private field tokenOwners_tokenIdSent_newCommitment_salt,\
	public field tokenOwners_tokenIdSent_newCommitment_commitment,\
	private field pendingStatus_oldCommitment_owner_secretKey,\
	public field pendingStatus_oldCommitment_nullifier,\
	private field[32] pendingStatus_nullifier_nonmembershipWitness_siblingPath,\
	private field[32] pendingStatus_nullifier_nonmembershipWitness_newsiblingPath,\
	private  field pendingStatus_oldCommitment_value,\
	private field pendingStatus_oldCommitment_salt,\
	private bool pendingStatus_oldCommitment_isDummy,\
	private field pendingStatus_oldCommitment_membershipWitness_index,\
	private field[32] pendingStatus_oldCommitment_membershipWitness_siblingPath,\
	private field pendingStatus_newCommitment_owner_publicKey,\
	private field pendingStatus_newCommitment_salt,\
	public field pendingStatus_newCommitment_commitment,\
	private field swapProposals_sharedAddress_oldCommitment_owner_secretKey,\
	public field swapProposals_sharedAddress_oldCommitment_nullifier,\
	private field[32] swapProposals_sharedAddress_nullifier_nonmembershipWitness_siblingPath,\
	private field[32] swapProposals_sharedAddress_nullifier_nonmembershipWitness_newsiblingPath,\
	private  swapStruct swapProposals_sharedAddress_oldCommitment_value,\
	private field swapProposals_sharedAddress_oldCommitment_salt,\
	private bool swapProposals_sharedAddress_oldCommitment_isDummy,\
	private field swapProposals_sharedAddress_oldCommitment_membershipWitness_index,\
	private field[32] swapProposals_sharedAddress_oldCommitment_membershipWitness_siblingPath,\
	private field swapProposals_sharedAddress_newCommitment_owner_publicKey,\
	private field swapProposals_sharedAddress_newCommitment_salt,\
	public field swapProposals_sharedAddress_newCommitment_commitment\
) -> (bool):

        
        // We need to hard-code the mappingId's of mappings into the circuit:
        field balances_mappingId = 5


        field balances_msgSender_0 = balances_msgSender_0_oldCommitment_value


        field balances_msgSender_1 = balances_msgSender_1_oldCommitment_value


        // We need to hard-code the mappingId's of mappings into the circuit:
        field tokenOwners_mappingId = 9


        field tokenOwners_tokenIdSent = tokenOwners_tokenIdSent_oldCommitment_value


        // We need to hard-code each stateVarId into the circuit:
        field pendingStatus_stateVarId_field = 20


        field pendingStatus = pendingStatus_oldCommitment_value


        // We need to hard-code the mappingId's of mappings into the circuit:
        field swapProposals_mappingId = 25


        swapStruct swapProposals_sharedAddress = swapProposals_sharedAddress_oldCommitment_value


        assert(pendingStatus == 0)

swapProposals_sharedAddress.swapAmountSent = swapProposals_sharedAddress.swapAmountSent + amountSent

// Moved decrementation of balances_msg

tokenOwners_tokenIdSent = sharedAddress

swapProposals_sharedAddress.swapTokenSent = tokenIdSent

swapProposals_sharedAddress.swapAmountRecieved = swapProposals_sharedAddress.swapAmountRecieved + amountRecieved

swapProposals_sharedAddress.swapTokenRecieved = tokenIdRecieved

pendingStatus = 1


        field balances_msgSender_0_stateVarId_field = mimc2([balances_mappingId, msgSender])


        field balances_msgSender_1_stateVarId_field = mimc2([balances_mappingId, msgSender])


        field balances_msgSender_2_stateVarId_field = mimc2([balances_mappingId, msgSender])


        // balances_msgSender_0_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] balances_msgSender_0_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(balances_msgSender_0_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool balances_msgSender_0_oldCommitment_owner_publicKey_sign = edwardsCompress(balances_msgSender_0_oldCommitment_owner_publicKey_point)[0]

        bool[254] balances_msgSender_0_oldCommitment_yBits = field_to_bool_256(balances_msgSender_0_oldCommitment_owner_publicKey_point[1])[2..256]
        balances_msgSender_0_oldCommitment_yBits[0] = balances_msgSender_0_oldCommitment_owner_publicKey_sign

        field balances_msgSender_0_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...balances_msgSender_0_oldCommitment_yBits])


        // balances_msgSender_1_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] balances_msgSender_1_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(balances_msgSender_1_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool balances_msgSender_1_oldCommitment_owner_publicKey_sign = edwardsCompress(balances_msgSender_1_oldCommitment_owner_publicKey_point)[0]

        bool[254] balances_msgSender_1_oldCommitment_yBits = field_to_bool_256(balances_msgSender_1_oldCommitment_owner_publicKey_point[1])[2..256]
        balances_msgSender_1_oldCommitment_yBits[0] = balances_msgSender_1_oldCommitment_owner_publicKey_sign

        field balances_msgSender_1_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...balances_msgSender_1_oldCommitment_yBits])


        // Nullify balances_msgSender_0:

        field balances_msgSender_0_oldCommitment_nullifier_check_field = poseidon([\
          balances_msgSender_0_stateVarId_field,\
          balances_msgSender_0_oldCommitment_owner_secretKey,\
          balances_msgSender_0_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(balances_msgSender_0_oldCommitment_nullifier)[8..256] == field_to_bool_256(balances_msgSender_0_oldCommitment_nullifier_check_field)[8..256]\
        )
        // balances_msgSender_0_oldCommitment_nullifier : non-existence check
        
        assert(\
          nullifierRoot == checkproof(\
            balances_msgSender_0_nullifier_nonmembershipWitness_siblingPath,\
            balances_msgSender_0_oldCommitment_nullifier\
           )       )

       assert(\
        newNullifierRoot == checkUpdatedPath(\
          balances_msgSender_0_nullifier_nonmembershipWitness_newsiblingPath,\
          balances_msgSender_0_oldCommitment_nullifier\
        )        )

        


        // Nullify balances_msgSender_1:

        field balances_msgSender_1_oldCommitment_nullifier_check_field = poseidon([\
          balances_msgSender_1_stateVarId_field,\
          balances_msgSender_1_oldCommitment_owner_secretKey,\
          balances_msgSender_1_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(balances_msgSender_1_oldCommitment_nullifier)[8..256] == field_to_bool_256(balances_msgSender_1_oldCommitment_nullifier_check_field)[8..256]\
        )
        // balances_msgSender_1_oldCommitment_nullifier : non-existence check
        
        assert(\
          nullifierRoot == checkproof(\
            balances_msgSender_1_nullifier_nonmembershipWitness_siblingPath,\
            balances_msgSender_1_oldCommitment_nullifier\
           )       )

       assert(\
        newNullifierRoot == checkUpdatedPath(\
          balances_msgSender_1_nullifier_nonmembershipWitness_newsiblingPath,\
          balances_msgSender_1_oldCommitment_nullifier\
        )        )

        



        // prepare secret state 'balances_msgSender_0' for commitment

          field balances_msgSender_0_oldCommitment_value_field = balances_msgSender_0_oldCommitment_value
          
        // balances_msgSender_0_oldCommitment_commitment: preimage check


        field balances_msgSender_0_oldCommitment_commitment_field = poseidon([\
          balances_msgSender_0_stateVarId_field,\
          balances_msgSender_0_oldCommitment_value_field,\
          balances_msgSender_0_oldCommitment_owner_publicKey,\
          balances_msgSender_0_oldCommitment_salt        ])



        // prepare secret state 'balances_msgSender_1' for commitment

          field balances_msgSender_1_oldCommitment_value_field = balances_msgSender_1_oldCommitment_value
          
        // balances_msgSender_1_oldCommitment_commitment: preimage check


        field balances_msgSender_1_oldCommitment_commitment_field = poseidon([\
          balances_msgSender_1_stateVarId_field,\
          balances_msgSender_1_oldCommitment_value_field,\
          balances_msgSender_1_oldCommitment_owner_publicKey,\
          balances_msgSender_1_oldCommitment_salt        ])


        // balances_msgSender_0_oldCommitment_commitment: existence check


        field balances_msgSender_0_commitmentRoot_check = checkRoot(\
          balances_msgSender_0_oldCommitment_membershipWitness_siblingPath,\
          balances_msgSender_0_oldCommitment_commitment_field,\
          balances_msgSender_0_oldCommitment_membershipWitness_index\
        )


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(balances_msgSender_0_commitmentRoot_check)[8..256]\
        )


        // balances_msgSender_1_oldCommitment_commitment: existence check


        field balances_msgSender_1_commitmentRoot_check = checkRoot(\
          balances_msgSender_1_oldCommitment_membershipWitness_siblingPath,\
          balances_msgSender_1_oldCommitment_commitment_field,\
          balances_msgSender_1_oldCommitment_membershipWitness_index\
        )


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(balances_msgSender_1_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'balances_msgSender_2' for commitment

        assert(balances_msgSender_0 + balances_msgSender_1 > amountSent)
            // TODO: assert no under/overflows

            field balances_msgSender_2_newCommitment_value_field = (balances_msgSender_0 + balances_msgSender_1) - (amountSent)

        // balances_msgSender_2_newCommitment_commitment - preimage check

        field balances_msgSender_2_newCommitment_commitment_check_field = poseidon([\
          balances_msgSender_2_stateVarId_field,\
          balances_msgSender_2_newCommitment_value_field,\
          balances_msgSender_2_newCommitment_owner_publicKey,\
          balances_msgSender_2_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(balances_msgSender_2_newCommitment_commitment)[8..256] == field_to_bool_256(balances_msgSender_2_newCommitment_commitment_check_field)[8..256]\
        )


        field tokenOwners_tokenIdSent_stateVarId_field = mimc2([tokenOwners_mappingId, tokenIdSent])


        // tokenOwners_tokenIdSent_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] tokenOwners_tokenIdSent_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(tokenOwners_tokenIdSent_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool tokenOwners_tokenIdSent_oldCommitment_owner_publicKey_sign = edwardsCompress(tokenOwners_tokenIdSent_oldCommitment_owner_publicKey_point)[0]

        bool[254] tokenOwners_tokenIdSent_oldCommitment_yBits = field_to_bool_256(tokenOwners_tokenIdSent_oldCommitment_owner_publicKey_point[1])[2..256]
        tokenOwners_tokenIdSent_oldCommitment_yBits[0] = tokenOwners_tokenIdSent_oldCommitment_owner_publicKey_sign

        field tokenOwners_tokenIdSent_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...tokenOwners_tokenIdSent_oldCommitment_yBits])


        // Nullify tokenOwners_tokenIdSent:

        field tokenOwners_tokenIdSent_oldCommitment_nullifier_check_field = poseidon([\
          tokenOwners_tokenIdSent_stateVarId_field,\
          tokenOwners_tokenIdSent_oldCommitment_owner_secretKey,\
          tokenOwners_tokenIdSent_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(tokenOwners_tokenIdSent_oldCommitment_nullifier)[8..256] == field_to_bool_256(tokenOwners_tokenIdSent_oldCommitment_nullifier_check_field)[8..256]\
        )
        // tokenOwners_tokenIdSent_oldCommitment_nullifier : non-existence check
        
        assert(\
          nullifierRoot == checkproof(\
            tokenOwners_tokenIdSent_nullifier_nonmembershipWitness_siblingPath,\
            tokenOwners_tokenIdSent_oldCommitment_nullifier\
           )       )

       assert(\
        newNullifierRoot == checkUpdatedPath(\
          tokenOwners_tokenIdSent_nullifier_nonmembershipWitness_newsiblingPath,\
          tokenOwners_tokenIdSent_oldCommitment_nullifier\
        )        )

        



        // prepare secret state 'tokenOwners_tokenIdSent' for commitment

          field tokenOwners_tokenIdSent_oldCommitment_value_field = tokenOwners_tokenIdSent_oldCommitment_value
          
        // tokenOwners_tokenIdSent_oldCommitment_commitment: preimage check


        field tokenOwners_tokenIdSent_oldCommitment_commitment_field = poseidon([\
          tokenOwners_tokenIdSent_stateVarId_field,\
          tokenOwners_tokenIdSent_oldCommitment_value_field,\
          tokenOwners_tokenIdSent_oldCommitment_owner_publicKey,\
          tokenOwners_tokenIdSent_oldCommitment_salt        ])


        // tokenOwners_tokenIdSent_oldCommitment_commitment: existence check


        field tokenOwners_tokenIdSent_commitmentRoot_check = checkRoot(\
          tokenOwners_tokenIdSent_oldCommitment_membershipWitness_siblingPath,\
          tokenOwners_tokenIdSent_oldCommitment_commitment_field,\
          tokenOwners_tokenIdSent_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        tokenOwners_tokenIdSent_commitmentRoot_check = if tokenOwners_tokenIdSent_oldCommitment_isDummy == true then commitmentRoot else tokenOwners_tokenIdSent_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(tokenOwners_tokenIdSent_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'tokenOwners_tokenIdSent' for commitment

        field tokenOwners_tokenIdSent_newCommitment_value_field = tokenOwners_tokenIdSent

        // tokenOwners_tokenIdSent_newCommitment_commitment - preimage check

        field tokenOwners_tokenIdSent_newCommitment_commitment_check_field = poseidon([\
          tokenOwners_tokenIdSent_stateVarId_field,\
          tokenOwners_tokenIdSent_newCommitment_value_field,\
          tokenOwners_tokenIdSent_newCommitment_owner_publicKey,\
          tokenOwners_tokenIdSent_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(tokenOwners_tokenIdSent_newCommitment_commitment)[8..256] == field_to_bool_256(tokenOwners_tokenIdSent_newCommitment_commitment_check_field)[8..256]\
        )


        // pendingStatus_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] pendingStatus_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(pendingStatus_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool pendingStatus_oldCommitment_owner_publicKey_sign = edwardsCompress(pendingStatus_oldCommitment_owner_publicKey_point)[0]

        bool[254] pendingStatus_oldCommitment_yBits = field_to_bool_256(pendingStatus_oldCommitment_owner_publicKey_point[1])[2..256]
        pendingStatus_oldCommitment_yBits[0] = pendingStatus_oldCommitment_owner_publicKey_sign

        field pendingStatus_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...pendingStatus_oldCommitment_yBits])


        // Nullify pendingStatus:

        field pendingStatus_oldCommitment_nullifier_check_field = poseidon([\
          pendingStatus_stateVarId_field,\
          pendingStatus_oldCommitment_owner_secretKey,\
          pendingStatus_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(pendingStatus_oldCommitment_nullifier)[8..256] == field_to_bool_256(pendingStatus_oldCommitment_nullifier_check_field)[8..256]\
        )
        // pendingStatus_oldCommitment_nullifier : non-existence check
        
        assert(\
          nullifierRoot == checkproof(\
            pendingStatus_nullifier_nonmembershipWitness_siblingPath,\
            pendingStatus_oldCommitment_nullifier\
           )       )

       assert(\
        newNullifierRoot == checkUpdatedPath(\
          pendingStatus_nullifier_nonmembershipWitness_newsiblingPath,\
          pendingStatus_oldCommitment_nullifier\
        )        )

        



        // prepare secret state 'pendingStatus' for commitment

          field pendingStatus_oldCommitment_value_field = pendingStatus_oldCommitment_value
          
        // pendingStatus_oldCommitment_commitment: preimage check


        field pendingStatus_oldCommitment_commitment_field = poseidon([\
          pendingStatus_stateVarId_field,\
          pendingStatus_oldCommitment_value_field,\
          pendingStatus_oldCommitment_owner_publicKey,\
          pendingStatus_oldCommitment_salt        ])


        // pendingStatus_oldCommitment_commitment: existence check


        field pendingStatus_commitmentRoot_check = checkRoot(\
          pendingStatus_oldCommitment_membershipWitness_siblingPath,\
          pendingStatus_oldCommitment_commitment_field,\
          pendingStatus_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        pendingStatus_commitmentRoot_check = if pendingStatus_oldCommitment_isDummy == true then commitmentRoot else pendingStatus_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(pendingStatus_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'pendingStatus' for commitment

        field pendingStatus_newCommitment_value_field = pendingStatus

        // pendingStatus_newCommitment_commitment - preimage check

        field pendingStatus_newCommitment_commitment_check_field = poseidon([\
          pendingStatus_stateVarId_field,\
          pendingStatus_newCommitment_value_field,\
          pendingStatus_newCommitment_owner_publicKey,\
          pendingStatus_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(pendingStatus_newCommitment_commitment)[8..256] == field_to_bool_256(pendingStatus_newCommitment_commitment_check_field)[8..256]\
        )


        field swapProposals_sharedAddress_stateVarId_field = mimc2([swapProposals_mappingId, sharedAddress])


        // swapProposals_sharedAddress_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] swapProposals_sharedAddress_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(swapProposals_sharedAddress_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool swapProposals_sharedAddress_oldCommitment_owner_publicKey_sign = edwardsCompress(swapProposals_sharedAddress_oldCommitment_owner_publicKey_point)[0]

        bool[254] swapProposals_sharedAddress_oldCommitment_yBits = field_to_bool_256(swapProposals_sharedAddress_oldCommitment_owner_publicKey_point[1])[2..256]
        swapProposals_sharedAddress_oldCommitment_yBits[0] = swapProposals_sharedAddress_oldCommitment_owner_publicKey_sign

        field swapProposals_sharedAddress_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...swapProposals_sharedAddress_oldCommitment_yBits])


        // Nullify swapProposals_sharedAddress:

        field swapProposals_sharedAddress_oldCommitment_nullifier_check_field = poseidon([\
          swapProposals_sharedAddress_stateVarId_field,\
          swapProposals_sharedAddress_oldCommitment_owner_secretKey,\
          swapProposals_sharedAddress_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(swapProposals_sharedAddress_oldCommitment_nullifier)[8..256] == field_to_bool_256(swapProposals_sharedAddress_oldCommitment_nullifier_check_field)[8..256]\
        )
        // swapProposals_sharedAddress_oldCommitment_nullifier : non-existence check
        
        assert(\
          nullifierRoot == checkproof(\
            swapProposals_sharedAddress_nullifier_nonmembershipWitness_siblingPath,\
            swapProposals_sharedAddress_oldCommitment_nullifier\
           )       )

       assert(\
        newNullifierRoot == checkUpdatedPath(\
          swapProposals_sharedAddress_nullifier_nonmembershipWitness_newsiblingPath,\
          swapProposals_sharedAddress_oldCommitment_nullifier\
        )        )

        


          // prepare secret state 'swapProposals_sharedAddress' for commitment

          
          
          // swapProposals_sharedAddress_oldCommitment_commitment: preimage check

          field swapProposals_sharedAddress_oldCommitment_commitment_field = poseidon([\
            swapProposals_sharedAddress_stateVarId_field,\
            	 swapProposals_sharedAddress_oldCommitment_value.swapAmountSent,\
	 swapProposals_sharedAddress_oldCommitment_value.swapAmountRecieved,\
	 swapProposals_sharedAddress_oldCommitment_value.swapTokenSent,\
	 swapProposals_sharedAddress_oldCommitment_value.swapTokenRecieved,\
            swapProposals_sharedAddress_oldCommitment_owner_publicKey,\
            swapProposals_sharedAddress_oldCommitment_salt\
          ])


        // swapProposals_sharedAddress_oldCommitment_commitment: existence check


        field swapProposals_sharedAddress_commitmentRoot_check = checkRoot(\
          swapProposals_sharedAddress_oldCommitment_membershipWitness_siblingPath,\
          swapProposals_sharedAddress_oldCommitment_commitment_field,\
          swapProposals_sharedAddress_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        swapProposals_sharedAddress_commitmentRoot_check = if swapProposals_sharedAddress_oldCommitment_isDummy == true then commitmentRoot else swapProposals_sharedAddress_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(swapProposals_sharedAddress_commitmentRoot_check)[8..256]\
        )


          // prepare secret state 'swapProposals_sharedAddress' for commitment

          swapStruct swapProposals_sharedAddress_newCommitment_value = swapStruct {  swapAmountSent: swapProposals_sharedAddress.swapAmountSent, swapAmountRecieved: swapProposals_sharedAddress.swapAmountRecieved, swapTokenSent: swapProposals_sharedAddress.swapTokenSent, swapTokenRecieved: swapProposals_sharedAddress.swapTokenRecieved }


          // swapProposals_sharedAddress_newCommitment_commitment - preimage check

          field swapProposals_sharedAddress_newCommitment_commitment_check_field = poseidon([\
            swapProposals_sharedAddress_stateVarId_field,\
            	 swapProposals_sharedAddress_newCommitment_value.swapAmountSent,\
	 swapProposals_sharedAddress_newCommitment_value.swapAmountRecieved,\
	 swapProposals_sharedAddress_newCommitment_value.swapTokenSent,\
	 swapProposals_sharedAddress_newCommitment_value.swapTokenRecieved,\
            swapProposals_sharedAddress_newCommitment_owner_publicKey,\
            swapProposals_sharedAddress_newCommitment_salt\
          ])

          assert(\
            field_to_bool_256(swapProposals_sharedAddress_newCommitment_commitment)[8..256] == field_to_bool_256(swapProposals_sharedAddress_newCommitment_commitment_check_field)[8..256]\
          )

         return true
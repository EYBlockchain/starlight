from "hashes/sha256/sha256Padded.zok" import sha256Padded as sha256Padded
from "utils/casts/u32_8_to_bool_256.zok" import main as u32_8_to_bool_256
from "hashes/poseidon/poseidon.zok" import main as poseidon
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "./common/casts/u32_array_to_field.zok" import main as u32_array_to_field
from "utils/pack/bool/pack256.zok" import main as bool_256_to_field
from "./common/merkle-tree/mimc/altbn254/verify-membership/height32.zok" import main as checkRoot
from "./common/hashes/mimc/altbn254/mimc2.zok" import main as mimc2

def main(\
	private field value,\
	public field index,\
	private u32[8] a_oldCommitment_owner_secretKey,\
	public field a_oldCommitment_nullifier,\
	private  field a_oldCommitment_value,\
	private field a_oldCommitment_salt_field,\
	private bool a_oldCommitment_isDummy,\
	public field commitmentRoot,\
	private field a_oldCommitment_membershipWitness_index,\
	private field[32] a_oldCommitment_membershipWitness_siblingPath,\
	private field a_newCommitment_owner_publicKey_field,\
	private field a_newCommitment_salt_field,\
	public field a_newCommitment_commitment,\
	private u32[8] b_index_oldCommitment_owner_secretKey,\
	public field b_index_oldCommitment_nullifier,\
	private  field b_index_oldCommitment_value,\
	private field b_index_oldCommitment_salt_field,\
	private bool b_index_oldCommitment_isDummy,\
	private field b_index_oldCommitment_membershipWitness_index,\
	private field[32] b_index_oldCommitment_membershipWitness_siblingPath,\
	private field b_index_newCommitment_owner_publicKey_field,\
	private field b_index_newCommitment_salt_field,\
	public field b_index_newCommitment_commitment,\
	private u32[8] b_index_1_oldCommitment_owner_secretKey,\
	public field b_index_1_oldCommitment_nullifier,\
	private  field b_index_1_oldCommitment_value,\
	private field b_index_1_oldCommitment_salt_field,\
	private bool b_index_1_oldCommitment_isDummy,\
	private field b_index_1_oldCommitment_membershipWitness_index,\
	private field[32] b_index_1_oldCommitment_membershipWitness_siblingPath,\
	private field b_index_1_newCommitment_owner_publicKey_field,\
	private field b_index_1_newCommitment_salt_field,\
	public field b_index_1_newCommitment_commitment\
) -> (bool):

        
        // We need to hard-code each stateVarId into the circuit:
        field a_stateVarId_field = 3


        field a = a_oldCommitment_value


        // We need to hard-code the mappingId's of mappings into the circuit:
        field b_mappingId = 6


        field b_index = b_index_oldCommitment_value


        field b_index_1 = b_index_1_oldCommitment_value

a = a + value

b_index = 0


        field index_1 = index + 1

b_index_1 = value


        // a_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        u32[8] a_oldCommitment_owner_publicKey = sha256Padded(u32_8_to_bool_256(a_oldCommitment_owner_secretKey))


        // Nullify a:

        field a_oldCommitment_owner_secretKey_field =u32_array_to_field(a_oldCommitment_owner_secretKey)

        field a_oldCommitment_nullifier_check_field = poseidon([\
          a_stateVarId_field,\
          a_oldCommitment_owner_secretKey_field,\
          a_oldCommitment_salt_field\
        ])

        assert(\
        field_to_bool_256(a_oldCommitment_nullifier)[8..256] == field_to_bool_256(a_oldCommitment_nullifier_check_field)[8..256]\
        )


        // a_oldCommitment_commitment: preimage check

        field a_oldCommitment_owner_publicKey_field =u32_array_to_field(a_oldCommitment_owner_publicKey)


        field a_oldCommitment_commitment_field = poseidon([\
          a_stateVarId_field,\
          a_oldCommitment_value,\
          a_oldCommitment_owner_publicKey_field,\
          a_oldCommitment_salt_field\
        ])


        // a_oldCommitment_commitment: existence check


        field a_commitmentRoot_check = checkRoot(\
          a_oldCommitment_membershipWitness_siblingPath,\
          a_oldCommitment_commitment_field,\
          a_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        a_commitmentRoot_check = if a_oldCommitment_isDummy == true then commitmentRoot else a_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(a_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'a' for commitment

        field a_newCommitment_value_field = a

        // a_newCommitment_commitment - preimage check

        field a_newCommitment_commitment_check_field = poseidon([\
          a_stateVarId_field,\
          a_newCommitment_value_field,\
          a_newCommitment_owner_publicKey_field,\
          a_newCommitment_salt_field\
        ])

        assert(\
          field_to_bool_256(a_newCommitment_commitment)[8..256] == field_to_bool_256(a_newCommitment_commitment_check_field)[8..256]\
        )


        field b_index_stateVarId_field = mimc2([b_mappingId, index])


        // b_index_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        u32[8] b_index_oldCommitment_owner_publicKey = sha256Padded(u32_8_to_bool_256(b_index_oldCommitment_owner_secretKey))


        // Nullify b_index:

        field b_index_oldCommitment_owner_secretKey_field =u32_array_to_field(b_index_oldCommitment_owner_secretKey)

        field b_index_oldCommitment_nullifier_check_field = poseidon([\
          b_index_stateVarId_field,\
          b_index_oldCommitment_owner_secretKey_field,\
          b_index_oldCommitment_salt_field\
        ])

        assert(\
        field_to_bool_256(b_index_oldCommitment_nullifier)[8..256] == field_to_bool_256(b_index_oldCommitment_nullifier_check_field)[8..256]\
        )


        // b_index_oldCommitment_commitment: preimage check

        field b_index_oldCommitment_owner_publicKey_field =u32_array_to_field(b_index_oldCommitment_owner_publicKey)


        field b_index_oldCommitment_commitment_field = poseidon([\
          b_index_stateVarId_field,\
          b_index_oldCommitment_value,\
          b_index_oldCommitment_owner_publicKey_field,\
          b_index_oldCommitment_salt_field\
        ])


        // b_index_oldCommitment_commitment: existence check


        field b_index_commitmentRoot_check = checkRoot(\
          b_index_oldCommitment_membershipWitness_siblingPath,\
          b_index_oldCommitment_commitment_field,\
          b_index_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        b_index_commitmentRoot_check = if b_index_oldCommitment_isDummy == true then commitmentRoot else b_index_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(b_index_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'b_index' for commitment

        field b_index_newCommitment_value_field = b_index

        // b_index_newCommitment_commitment - preimage check

        field b_index_newCommitment_commitment_check_field = poseidon([\
          b_index_stateVarId_field,\
          b_index_newCommitment_value_field,\
          b_index_newCommitment_owner_publicKey_field,\
          b_index_newCommitment_salt_field\
        ])

        assert(\
          field_to_bool_256(b_index_newCommitment_commitment)[8..256] == field_to_bool_256(b_index_newCommitment_commitment_check_field)[8..256]\
        )


        field b_index_1_stateVarId_field = mimc2([b_mappingId, index_1])


        // b_index_1_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        u32[8] b_index_1_oldCommitment_owner_publicKey = sha256Padded(u32_8_to_bool_256(b_index_1_oldCommitment_owner_secretKey))


        // Nullify b_index_1:

        field b_index_1_oldCommitment_owner_secretKey_field =u32_array_to_field(b_index_1_oldCommitment_owner_secretKey)

        field b_index_1_oldCommitment_nullifier_check_field = poseidon([\
          b_index_1_stateVarId_field,\
          b_index_1_oldCommitment_owner_secretKey_field,\
          b_index_1_oldCommitment_salt_field\
        ])

        assert(\
        field_to_bool_256(b_index_1_oldCommitment_nullifier)[8..256] == field_to_bool_256(b_index_1_oldCommitment_nullifier_check_field)[8..256]\
        )


        // b_index_1_oldCommitment_commitment: preimage check

        field b_index_1_oldCommitment_owner_publicKey_field =u32_array_to_field(b_index_1_oldCommitment_owner_publicKey)


        field b_index_1_oldCommitment_commitment_field = poseidon([\
          b_index_1_stateVarId_field,\
          b_index_1_oldCommitment_value,\
          b_index_1_oldCommitment_owner_publicKey_field,\
          b_index_1_oldCommitment_salt_field\
        ])


        // b_index_1_oldCommitment_commitment: existence check


        field b_index_1_commitmentRoot_check = checkRoot(\
          b_index_1_oldCommitment_membershipWitness_siblingPath,\
          b_index_1_oldCommitment_commitment_field,\
          b_index_1_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        b_index_1_commitmentRoot_check = if b_index_1_oldCommitment_isDummy == true then commitmentRoot else b_index_1_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(b_index_1_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'b_index_1' for commitment

        field b_index_1_newCommitment_value_field = b_index_1

        // b_index_1_newCommitment_commitment - preimage check

        field b_index_1_newCommitment_commitment_check_field = poseidon([\
          b_index_1_stateVarId_field,\
          b_index_1_newCommitment_value_field,\
          b_index_1_newCommitment_owner_publicKey_field,\
          b_index_1_newCommitment_salt_field\
        ])

        assert(\
          field_to_bool_256(b_index_1_newCommitment_commitment)[8..256] == field_to_bool_256(b_index_1_newCommitment_commitment_check_field)[8..256]\
        )

         return true
        
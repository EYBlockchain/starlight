from "ecc/babyjubjubParams" import main as curveParams
from "ecc/edwardsScalarMult" import main as scalarMult
from "ecc/edwardsCompress" import main as edwardsCompress
from "utils/pack/bool/pack256.zok" import main as bool_256_to_field
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "hashes/poseidon/poseidon.zok" import main as poseidon
from "./common/merkle-tree/sparse-merkle-tree/checkproof.zok" import main as checkproof
from "./common/merkle-tree/sparse-merkle-tree/checkproof.zok" import checkUpdatedPath as checkUpdatedPath
from "./common/merkle-tree/mimc/altbn254/verify-membership/height32.zok" import main as checkRoot

def main(\
	public field msgSender,\
	private field a_oldCommitment_owner_secretKey,\
	public field nullifierRoot,\
	public field newNullifierRoot,\
	public field a_oldCommitment_nullifier,\
	private field[32] a_nullifier_nonmembershipWitness_siblingPath,\
	private field[32] a_nullifier_nonmembershipWitness_newsiblingPath,\
	private  field a_oldCommitment_value,\
	private field a_oldCommitment_salt,\
	private bool a_oldCommitment_isDummy,\
	public field commitmentRoot,\
	private field a_oldCommitment_membershipWitness_index,\
	private field[32] a_oldCommitment_membershipWitness_siblingPath,\
	private field a_newCommitment_owner_publicKey,\
	private field a_newCommitment_salt,\
	public field a_newCommitment_commitment,\
	private field admin_oldCommitment_owner_secretKey,\
	private field[32] admin_nullifier_nonmembershipWitness_siblingPath,\
	private  field admin_oldCommitment_value,\
	private field admin_oldCommitment_salt,\
	private field admin_oldCommitment_membershipWitness_index,\
	private field[32] admin_oldCommitment_membershipWitness_siblingPath,\
	private field adminstartor_oldCommitment_owner_secretKey,\
	private field[32] adminstartor_nullifier_nonmembershipWitness_siblingPath,\
	private  field adminstartor_oldCommitment_value,\
	private field adminstartor_oldCommitment_salt,\
	private field adminstartor_oldCommitment_membershipWitness_index,\
	private field[32] adminstartor_oldCommitment_membershipWitness_siblingPath\
) -> (bool):

        
        // We need to hard-code each stateVarId into the circuit:
        field a_stateVarId_field = 3


        field a = a_oldCommitment_value


        // We need to hard-code each stateVarId into the circuit:
        field admin_stateVarId_field = 5


        field admin = admin_oldCommitment_value


        // We need to hard-code each stateVarId into the circuit:
        field adminstartor_stateVarId_field = 7


        field adminstartor = adminstartor_oldCommitment_value


        assert(msgSender == adminstartor)

a = a + 3


        assert(msgSender == admin)

a = a + 2


        // a_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] a_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(a_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool a_oldCommitment_owner_publicKey_sign = edwardsCompress(a_oldCommitment_owner_publicKey_point)[0]

        bool[254] a_oldCommitment_yBits = field_to_bool_256(a_oldCommitment_owner_publicKey_point[1])[2..256]
        a_oldCommitment_yBits[0] = a_oldCommitment_owner_publicKey_sign

        field a_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...a_oldCommitment_yBits])


        // Nullify a:

        field a_oldCommitment_nullifier_check_field = poseidon([\
          a_stateVarId_field,\
          a_oldCommitment_owner_secretKey,\
          a_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(a_oldCommitment_nullifier)[8..256] == field_to_bool_256(a_oldCommitment_nullifier_check_field)[8..256]\
        )
        // a_oldCommitment_nullifier : non-existence check
        
        assert(\
          nullifierRoot == checkproof(\
            a_nullifier_nonmembershipWitness_siblingPath,\
            a_oldCommitment_nullifier\
           )       )

       assert(\
        newNullifierRoot == checkUpdatedPath(\
          a_nullifier_nonmembershipWitness_newsiblingPath,\
          a_oldCommitment_nullifier\
        )        )

        



        // prepare secret state 'a' for commitment

          field a_oldCommitment_value_field = a_oldCommitment_value
          
        // a_oldCommitment_commitment: preimage check


        field a_oldCommitment_commitment_field = poseidon([\
          a_stateVarId_field,\
          a_oldCommitment_value_field,\
          a_oldCommitment_owner_publicKey,\
          a_oldCommitment_salt        ])


        // a_oldCommitment_commitment: existence check


        field a_commitmentRoot_check = checkRoot(\
          a_oldCommitment_membershipWitness_siblingPath,\
          a_oldCommitment_commitment_field,\
          a_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        a_commitmentRoot_check = if a_oldCommitment_isDummy == true then commitmentRoot else a_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(a_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'a' for commitment

        field a_newCommitment_value_field = a

        // a_newCommitment_commitment - preimage check

        field a_newCommitment_commitment_check_field = poseidon([\
          a_stateVarId_field,\
          a_newCommitment_value_field,\
          a_newCommitment_owner_publicKey,\
          a_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(a_newCommitment_commitment)[8..256] == field_to_bool_256(a_newCommitment_commitment_check_field)[8..256]\
        )


        // admin_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] admin_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(admin_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool admin_oldCommitment_owner_publicKey_sign = edwardsCompress(admin_oldCommitment_owner_publicKey_point)[0]

        bool[254] admin_oldCommitment_yBits = field_to_bool_256(admin_oldCommitment_owner_publicKey_point[1])[2..256]
        admin_oldCommitment_yBits[0] = admin_oldCommitment_owner_publicKey_sign

        field admin_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...admin_oldCommitment_yBits])


        // Create the Nullifier  for admin and no need to nullify it as its accessed only:

        field admin_oldCommitment_nullifier_check_field = poseidon([\
          admin_stateVarId_field,\
          admin_oldCommitment_owner_secretKey,\
          admin_oldCommitment_salt\
        ])

        // admin_oldCommitment_nullifier : non-existence check
        
        assert(\
          nullifierRoot == checkproof(\
            admin_nullifier_nonmembershipWitness_siblingPath,\
            admin_oldCommitment_nullifier_check_field\
           )       )
        



        // prepare secret state 'admin' for commitment

          field admin_oldCommitment_value_field = admin_oldCommitment_value
          
        // admin_oldCommitment_commitment: preimage check


        field admin_oldCommitment_commitment_field = poseidon([\
          admin_stateVarId_field,\
          admin_oldCommitment_value_field,\
          admin_oldCommitment_owner_publicKey,\
          admin_oldCommitment_salt        ])


        // admin_oldCommitment_commitment: existence check


        field admin_commitmentRoot_check = checkRoot(\
          admin_oldCommitment_membershipWitness_siblingPath,\
          admin_oldCommitment_commitment_field,\
          admin_oldCommitment_membershipWitness_index\
        )


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(admin_commitmentRoot_check)[8..256]\
        )


        // adminstartor_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] adminstartor_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(adminstartor_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool adminstartor_oldCommitment_owner_publicKey_sign = edwardsCompress(adminstartor_oldCommitment_owner_publicKey_point)[0]

        bool[254] adminstartor_oldCommitment_yBits = field_to_bool_256(adminstartor_oldCommitment_owner_publicKey_point[1])[2..256]
        adminstartor_oldCommitment_yBits[0] = adminstartor_oldCommitment_owner_publicKey_sign

        field adminstartor_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...adminstartor_oldCommitment_yBits])


        // Create the Nullifier  for adminstartor and no need to nullify it as its accessed only:

        field adminstartor_oldCommitment_nullifier_check_field = poseidon([\
          adminstartor_stateVarId_field,\
          adminstartor_oldCommitment_owner_secretKey,\
          adminstartor_oldCommitment_salt\
        ])

        // adminstartor_oldCommitment_nullifier : non-existence check
        
        assert(\
          nullifierRoot == checkproof(\
            adminstartor_nullifier_nonmembershipWitness_siblingPath,\
            adminstartor_oldCommitment_nullifier_check_field\
           )       )
        



        // prepare secret state 'adminstartor' for commitment

          field adminstartor_oldCommitment_value_field = adminstartor_oldCommitment_value
          
        // adminstartor_oldCommitment_commitment: preimage check


        field adminstartor_oldCommitment_commitment_field = poseidon([\
          adminstartor_stateVarId_field,\
          adminstartor_oldCommitment_value_field,\
          adminstartor_oldCommitment_owner_publicKey,\
          adminstartor_oldCommitment_salt        ])


        // adminstartor_oldCommitment_commitment: existence check


        field adminstartor_commitmentRoot_check = checkRoot(\
          adminstartor_oldCommitment_membershipWitness_siblingPath,\
          adminstartor_oldCommitment_commitment_field,\
          adminstartor_oldCommitment_membershipWitness_index\
        )


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(adminstartor_commitmentRoot_check)[8..256]\
        )

         return true
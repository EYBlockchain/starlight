from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "hashes/poseidon/poseidon.zok" import main as poseidon
from "./add.zok" import main as add 
from "./common/encryption/kem-dem.zok" import EncryptedMsgs as EncryptedMsgs 

def main(\
	private field value,\
	private field a_0_newCommitment_owner_publicKey,\
	private field a_0_newCommitment_salt,\
	public field a_0_newCommitment_commitment,\
	private field b_0_newCommitment_salt,\
	public field b_0_newCommitment_commitment,\
	private field b_0_newCommitment_ephSecretKey,\
	private field[2] b_0_newCommitment_owner_publicKey_point\
) -> (EncryptedMsgs<3>):

        
        // We need to hard-code each stateVarId into the circuit:
        field a_0_stateVarId_field = 3

// Skipping incrementation of a

  EncryptedMsgs<3> b_0_cipherText =  add(value,\
 	b_0_newCommitment_salt,\
 	b_0_newCommitment_commitment,\
 	b_0_newCommitment_ephSecretKey,\
 	b_0_newCommitment_owner_publicKey_point)


        // prepare secret state 'a_0' for commitment

        field a_0_newCommitment_value_field = value

        // a_0_newCommitment_commitment - preimage check

        field a_0_newCommitment_commitment_check_field = poseidon([\
          a_0_stateVarId_field,\
          a_0_newCommitment_value_field,\
          a_0_newCommitment_owner_publicKey,\
          a_0_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(a_0_newCommitment_commitment)[8..256] == field_to_bool_256(a_0_newCommitment_commitment_check_field)[8..256]\
        )

         return b_0_cipherText
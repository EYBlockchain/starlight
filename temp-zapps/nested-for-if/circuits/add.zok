from "ecc/babyjubjubParams" import main as curveParams
from "ecc/edwardsScalarMult" import main as scalarMult
from "ecc/edwardsCompress" import main as edwardsCompress
from "utils/pack/bool/pack256.zok" import main as bool_256_to_field
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "./common/hashes/poseidon/poseidon.zok" import main as poseidon
from "./common/merkle-tree/sparse-merkle-tree/checkproof.zok" import main as checkproof
from "./common/merkle-tree/sparse-merkle-tree/checkproof.zok" import checkUpdatedPath as checkUpdatedPath
from "./common/merkle-tree/mimc/altbn254/verify-membership/height32.zok" import main as checkRoot
from "./common/hashes/mimc/altbn254/mimc2.zok" import main as mimc2

struct SomeStruct {
        field a
field b
field c
      }

def main(\
	public field msgSender,\
	private field j,\
	private bool iterate,\
	private field total_oldCommitment_owner_secretKey,\
	public field nullifierRoot,\
	public field newNullifierRoot,\
	public field total_oldCommitment_nullifier,\
	private field[32] total_nullifier_nonmembershipWitness_siblingPath,\
	private field[32] total_nullifier_nonmembershipWitness_newsiblingPath,\
	private  field total_oldCommitment_value,\
	private field total_oldCommitment_salt,\
	private bool total_oldCommitment_isDummy,\
	public field commitmentRoot,\
	private field total_oldCommitment_membershipWitness_index,\
	private field[32] total_oldCommitment_membershipWitness_siblingPath,\
	private field total_newCommitment_owner_publicKey,\
	private field total_newCommitment_salt,\
	public field total_newCommitment_commitment,\
	private field structs_msgSender_oldCommitment_owner_secretKey,\
	public field structs_msgSender_oldCommitment_nullifier,\
	private field[32] structs_msgSender_nullifier_nonmembershipWitness_siblingPath,\
	private field[32] structs_msgSender_nullifier_nonmembershipWitness_newsiblingPath,\
	private  SomeStruct structs_msgSender_oldCommitment_value,\
	private field structs_msgSender_oldCommitment_salt,\
	private bool structs_msgSender_oldCommitment_isDummy,\
	private field structs_msgSender_oldCommitment_membershipWitness_index,\
	private field[32] structs_msgSender_oldCommitment_membershipWitness_siblingPath,\
	private field structs_msgSender_newCommitment_owner_publicKey,\
	private field structs_msgSender_newCommitment_salt,\
	public field structs_msgSender_newCommitment_commitment\
) -> (bool):

        
        // We need to hard-code each stateVarId into the circuit:
        field total_stateVarId_field = 3


        field total = total_oldCommitment_value


        // We need to hard-code the mappingId's of mappings into the circuit:
        field structs_mappingId = 8


        SomeStruct structs_msgSender = structs_msgSender_oldCommitment_value

for u32 i in 0..5 do
            
        total = if iterate == true then total + j else total fi
        structs_msgSender.a = if iterate == true then 5 * j else structs_msgSender.a fi
        structs_msgSender.b = if iterate == true then total else structs_msgSender.b fi
        structs_msgSender.c = if iterate == true then msgSender else structs_msgSender.c fi
            endfor


        total = if iterate == false then j else total fi
        structs_msgSender.a = if iterate == false then j else structs_msgSender.a fi
        structs_msgSender.b = if iterate == false then total else structs_msgSender.b fi
        structs_msgSender.c = if iterate == false then msgSender else structs_msgSender.c fi


        // total_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] total_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(total_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool total_oldCommitment_owner_publicKey_sign = edwardsCompress(total_oldCommitment_owner_publicKey_point)[0]

        bool[254] total_oldCommitment_yBits = field_to_bool_256(total_oldCommitment_owner_publicKey_point[1])[2..256]
        total_oldCommitment_yBits[0] = total_oldCommitment_owner_publicKey_sign

        field total_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...total_oldCommitment_yBits])


        // Nullify total:

        field total_oldCommitment_nullifier_check_field = poseidon([\
          total_stateVarId_field,\
          total_oldCommitment_owner_secretKey,\
          total_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(total_oldCommitment_nullifier)[8..256] == field_to_bool_256(total_oldCommitment_nullifier_check_field)[8..256]\
        )
        // total_oldCommitment_nullifier : non-existence check
        
        assert(\
          nullifierRoot == checkproof(\
            total_nullifier_nonmembershipWitness_siblingPath,\
            total_oldCommitment_nullifier\
           )       )

       assert(\
        newNullifierRoot == checkUpdatedPath(\
          total_nullifier_nonmembershipWitness_newsiblingPath,\
          total_oldCommitment_nullifier\
        )        )

        



        // prepare secret state 'total' for commitment

          field total_oldCommitment_value_field = total_oldCommitment_value
          
        // total_oldCommitment_commitment: preimage check


        field total_oldCommitment_commitment_field = poseidon([\
          total_stateVarId_field,\
          total_oldCommitment_value_field,\
          total_oldCommitment_owner_publicKey,\
          total_oldCommitment_salt        ])


        // total_oldCommitment_commitment: existence check


        field total_commitmentRoot_check = checkRoot(\
          total_oldCommitment_membershipWitness_siblingPath,\
          total_oldCommitment_commitment_field,\
          total_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        total_commitmentRoot_check = if total_oldCommitment_isDummy == true then commitmentRoot else total_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(total_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'total' for commitment

        field total_newCommitment_value_field = total

        // total_newCommitment_commitment - preimage check

        field total_newCommitment_commitment_check_field = poseidon([\
          total_stateVarId_field,\
          total_newCommitment_value_field,\
          total_newCommitment_owner_publicKey,\
          total_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(total_newCommitment_commitment)[8..256] == field_to_bool_256(total_newCommitment_commitment_check_field)[8..256]\
        )


        field structs_msgSender_stateVarId_field = mimc2([structs_mappingId, msgSender])


        // structs_msgSender_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] structs_msgSender_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(structs_msgSender_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool structs_msgSender_oldCommitment_owner_publicKey_sign = edwardsCompress(structs_msgSender_oldCommitment_owner_publicKey_point)[0]

        bool[254] structs_msgSender_oldCommitment_yBits = field_to_bool_256(structs_msgSender_oldCommitment_owner_publicKey_point[1])[2..256]
        structs_msgSender_oldCommitment_yBits[0] = structs_msgSender_oldCommitment_owner_publicKey_sign

        field structs_msgSender_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...structs_msgSender_oldCommitment_yBits])


        // Nullify structs_msgSender:

        field structs_msgSender_oldCommitment_nullifier_check_field = poseidon([\
          structs_msgSender_stateVarId_field,\
          structs_msgSender_oldCommitment_owner_secretKey,\
          structs_msgSender_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(structs_msgSender_oldCommitment_nullifier)[8..256] == field_to_bool_256(structs_msgSender_oldCommitment_nullifier_check_field)[8..256]\
        )
        // structs_msgSender_oldCommitment_nullifier : non-existence check
        
        assert(\
          nullifierRoot == checkproof(\
            structs_msgSender_nullifier_nonmembershipWitness_siblingPath,\
            structs_msgSender_oldCommitment_nullifier\
           )       )

       assert(\
        newNullifierRoot == checkUpdatedPath(\
          structs_msgSender_nullifier_nonmembershipWitness_newsiblingPath,\
          structs_msgSender_oldCommitment_nullifier\
        )        )

        


          // prepare secret state 'structs_msgSender' for commitment

          
          
          // structs_msgSender_oldCommitment_commitment: preimage check

          field structs_msgSender_oldCommitment_commitment_field = poseidon([\
            structs_msgSender_stateVarId_field,\
            	 structs_msgSender_oldCommitment_value.a,\
	 structs_msgSender_oldCommitment_value.b,\
	 structs_msgSender_oldCommitment_value.c,\
            structs_msgSender_oldCommitment_owner_publicKey,\
            structs_msgSender_oldCommitment_salt\
          ])


        // structs_msgSender_oldCommitment_commitment: existence check


        field structs_msgSender_commitmentRoot_check = checkRoot(\
          structs_msgSender_oldCommitment_membershipWitness_siblingPath,\
          structs_msgSender_oldCommitment_commitment_field,\
          structs_msgSender_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        structs_msgSender_commitmentRoot_check = if structs_msgSender_oldCommitment_isDummy == true then commitmentRoot else structs_msgSender_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(structs_msgSender_commitmentRoot_check)[8..256]\
        )


          // prepare secret state 'structs_msgSender' for commitment

          SomeStruct structs_msgSender_newCommitment_value = SomeStruct {  a: structs_msgSender.a, b: structs_msgSender.b, c: structs_msgSender.c }


          // structs_msgSender_newCommitment_commitment - preimage check

          field structs_msgSender_newCommitment_commitment_check_field = poseidon([\
            structs_msgSender_stateVarId_field,\
            	 structs_msgSender_newCommitment_value.a,\
	 structs_msgSender_newCommitment_value.b,\
	 structs_msgSender_newCommitment_value.c,\
            structs_msgSender_newCommitment_owner_publicKey,\
            structs_msgSender_newCommitment_salt\
          ])

          assert(\
            field_to_bool_256(structs_msgSender_newCommitment_commitment)[8..256] == field_to_bool_256(structs_msgSender_newCommitment_commitment_check_field)[8..256]\
          )

         return true
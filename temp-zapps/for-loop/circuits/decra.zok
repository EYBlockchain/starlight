from "hashes/sha256/sha256Padded.zok" import sha256Padded as sha256Padded
from "utils/casts/u32_8_to_bool_256.zok" import main as u32_8_to_bool_256
from "hashes/poseidon/poseidon.zok" import main as poseidon
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "./common/casts/u32_array_to_field.zok" import main as u32_array_to_field
from "utils/pack/bool/pack256.zok" import main as bool_256_to_field
from "./common/merkle-tree/mimc/altbn254/verify-membership/height32.zok" import main as checkRoot

def main(\
	private field param2,\
	private u32[8] a_0_oldCommitment_owner_secretKey,\
	private u32[8] a_1_oldCommitment_owner_secretKey,\
	public field a_0_oldCommitment_nullifier,\
	public field a_1_oldCommitment_nullifier,\
	private  field a_0_oldCommitment_value,\
	private field a_0_oldCommitment_salt_field,\
	private  field a_1_oldCommitment_value,\
	private field a_1_oldCommitment_salt_field,\
	public field commitmentRoot,\
	private field a_0_oldCommitment_membershipWitness_index,\
	private field[32] a_0_oldCommitment_membershipWitness_siblingPath,\
	private field a_1_oldCommitment_membershipWitness_index,\
	private field[32] a_1_oldCommitment_membershipWitness_siblingPath,\
	private field a_2_newCommitment_owner_publicKey_field,\
	private field a_2_newCommitment_salt_field,\
	public field a_2_newCommitment_commitment\
) -> (bool):

        
        // We need to hard-code each stateVarId into the circuit:
        field a_0_stateVarId_field = 3


        // We need to hard-code each stateVarId into the circuit:
        field a_1_stateVarId_field = 3


        field a_0 = a_0_oldCommitment_value


        field a_1 = a_1_oldCommitment_value


        // We need to hard-code each stateVarId into the circuit:
        field a_2_stateVarId_field = 3

// Moved decrementation of a


        // a_0_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        u32[8] a_0_oldCommitment_owner_publicKey = sha256Padded(u32_8_to_bool_256(a_0_oldCommitment_owner_secretKey))


        // a_1_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        u32[8] a_1_oldCommitment_owner_publicKey = sha256Padded(u32_8_to_bool_256(a_1_oldCommitment_owner_secretKey))


        // Nullify a_0:

        field a_0_oldCommitment_owner_secretKey_field =u32_array_to_field(a_0_oldCommitment_owner_secretKey)

        field a_0_oldCommitment_nullifier_check_field = poseidon([\
          a_0_stateVarId_field,\
          a_0_oldCommitment_owner_secretKey_field,\
          a_0_oldCommitment_salt_field\
        ])

        assert(\
        field_to_bool_256(a_0_oldCommitment_nullifier)[8..256] == field_to_bool_256(a_0_oldCommitment_nullifier_check_field)[8..256]\
        )


        // Nullify a_1:

        field a_1_oldCommitment_owner_secretKey_field =u32_array_to_field(a_1_oldCommitment_owner_secretKey)

        field a_1_oldCommitment_nullifier_check_field = poseidon([\
          a_1_stateVarId_field,\
          a_1_oldCommitment_owner_secretKey_field,\
          a_1_oldCommitment_salt_field\
        ])

        assert(\
        field_to_bool_256(a_1_oldCommitment_nullifier)[8..256] == field_to_bool_256(a_1_oldCommitment_nullifier_check_field)[8..256]\
        )


        // a_0_oldCommitment_commitment: preimage check

        field a_0_oldCommitment_owner_publicKey_field =u32_array_to_field(a_0_oldCommitment_owner_publicKey)


        field a_0_oldCommitment_commitment_field = poseidon([\
          a_0_stateVarId_field,\
          a_0_oldCommitment_value,\
          a_0_oldCommitment_owner_publicKey_field,\
          a_0_oldCommitment_salt_field\
        ])


        // a_1_oldCommitment_commitment: preimage check

        field a_1_oldCommitment_owner_publicKey_field =u32_array_to_field(a_1_oldCommitment_owner_publicKey)


        field a_1_oldCommitment_commitment_field = poseidon([\
          a_1_stateVarId_field,\
          a_1_oldCommitment_value,\
          a_1_oldCommitment_owner_publicKey_field,\
          a_1_oldCommitment_salt_field\
        ])


        // a_0_oldCommitment_commitment: existence check


        field a_0_commitmentRoot_check = checkRoot(\
          a_0_oldCommitment_membershipWitness_siblingPath,\
          a_0_oldCommitment_commitment_field,\
          a_0_oldCommitment_membershipWitness_index\
        )


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(a_0_commitmentRoot_check)[8..256]\
        )


        // a_1_oldCommitment_commitment: existence check


        field a_1_commitmentRoot_check = checkRoot(\
          a_1_oldCommitment_membershipWitness_siblingPath,\
          a_1_oldCommitment_commitment_field,\
          a_1_oldCommitment_membershipWitness_index\
        )


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(a_1_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'a_2' for commitment

        assert(a_0 + a_1 > param2)
            // TODO: assert no under/overflows

            field a_2_newCommitment_value_field = (a_0 + a_1) - (param2)

        // a_2_newCommitment_commitment - preimage check

        field a_2_newCommitment_commitment_check_field = poseidon([\
          a_2_stateVarId_field,\
          a_2_newCommitment_value_field,\
          a_2_newCommitment_owner_publicKey_field,\
          a_2_newCommitment_salt_field\
        ])

        assert(\
          field_to_bool_256(a_2_newCommitment_commitment)[8..256] == field_to_bool_256(a_2_newCommitment_commitment_check_field)[8..256]\
        )

         return true
        
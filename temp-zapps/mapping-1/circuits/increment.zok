from "./common/hashes/mimc/altbn254/mimc2.zok" import main as mimc2
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "utils/casts/u32_8_to_bool_256.zok" import main as u32_8_to_bool_256
from "hashes/poseidon/poseidon.zok" import main as poseidon
from "./common/casts/u32_array_to_field.zok" import main as u32_array_to_field

def main(\
	private field param2,\
	private field msg,\
	private field a_msg_0_newCommitment_owner_publicKey_field,\
	private field a_msg_0_newCommitment_salt_field,\
	public field a_msg_0_newCommitment_commitment\
) -> (bool):

        
        // We need to hard-code the mappingId's of mappings into the circuit:
        field a_mappingId = 5

// Skipping incrementation of a_msg


        field a_msg_0_stateVarId_field = mimc2([a_mappingId, msg])


        field a_msg_1_stateVarId_field = mimc2([a_mappingId, msg])


        // prepare secret state 'a_msg_0' for commitment

        field a_msg_0_newCommitment_value_field = param2

        // a_msg_0_newCommitment_commitment - preimage check

        field a_msg_0_newCommitment_commitment_check_field = poseidon([\
          a_msg_0_stateVarId_field,\
          a_msg_0_newCommitment_value_field,\
          a_msg_0_newCommitment_owner_publicKey_field,\
          a_msg_0_newCommitment_salt_field\
        ])

        assert(\
          field_to_bool_256(a_msg_0_newCommitment_commitment)[8..256] == field_to_bool_256(a_msg_0_newCommitment_commitment_check_field)[8..256]\
        )

         return true
        
from "hashes/sha256/sha256Padded.zok" import sha256Padded as sha256Padded
from "utils/casts/u32_8_to_bool_256.zok" import main as u32_8_to_bool_256
from "hashes/poseidon/poseidon.zok" import main as poseidon
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "./common/casts/u32_array_to_field.zok" import main as u32_array_to_field
from "utils/pack/bool/pack256.zok" import main as bool_256_to_field
from "./common/merkle-tree/mimc/altbn254/verify-membership/height32.zok" import main as checkRoot

def main(\
	private field value,\
	private u32[8] a_oldCommitment_owner_secretKey,\
	public field a_oldCommitment_nullifier,\
	private  field a_oldCommitment_value,\
	private field a_oldCommitment_salt_field,\
	public field commitmentRoot,\
	private field a_oldCommitment_membershipWitness_index,\
	private field[32] a_oldCommitment_membershipWitness_siblingPath,\
	private field a_newCommitment_owner_publicKey_field,\
	private field a_newCommitment_salt_field,\
	public field a_newCommitment_commitment\
) -> (bool):

        
        // We need to hard-code each stateVarId into the circuit:
        field a_stateVarId_field = 4


        field a = a_oldCommitment_value

a = a - value


        // a_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        u32[8] a_oldCommitment_owner_publicKey = sha256Padded(u32_8_to_bool_256(a_oldCommitment_owner_secretKey))


        // Nullify a:

        field a_oldCommitment_owner_secretKey_field =u32_array_to_field(a_oldCommitment_owner_secretKey)

        field a_oldCommitment_nullifier_check_field = poseidon([\
          a_stateVarId_field,\
          a_oldCommitment_owner_secretKey_field,\
          a_oldCommitment_salt_field\
        ])

        assert(\
        field_to_bool_256(a_oldCommitment_nullifier)[8..256] == field_to_bool_256(a_oldCommitment_nullifier_check_field)[8..256]\
        )


        // a_oldCommitment_commitment: preimage check

        field a_oldCommitment_owner_publicKey_field =u32_array_to_field(a_oldCommitment_owner_publicKey)


        field a_oldCommitment_commitment_field = poseidon([\
          a_stateVarId_field,\
          a_oldCommitment_value,\
          a_oldCommitment_owner_publicKey_field,\
          a_oldCommitment_salt_field\
        ])


        // a_oldCommitment_commitment: existence check


        field a_commitmentRoot_check = checkRoot(\
          a_oldCommitment_membershipWitness_siblingPath,\
          a_oldCommitment_commitment_field,\
          a_oldCommitment_membershipWitness_index\
        )


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(a_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'a' for commitment

        field a_newCommitment_value_field = a

        // a_newCommitment_commitment - preimage check

        field a_newCommitment_commitment_check_field = poseidon([\
          a_stateVarId_field,\
          a_newCommitment_value_field,\
          a_newCommitment_owner_publicKey_field,\
          a_newCommitment_salt_field\
        ])

        assert(\
          field_to_bool_256(a_newCommitment_commitment)[8..256] == field_to_bool_256(a_newCommitment_commitment_check_field)[8..256]\
        )

         return true
        
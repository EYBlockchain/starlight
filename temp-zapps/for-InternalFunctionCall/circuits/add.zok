from "hashes/sha256/sha256Padded.zok" import sha256Padded as sha256Padded
from "utils/casts/u32_8_to_bool_256.zok" import main as u32_8_to_bool_256
from "hashes/poseidon/poseidon.zok" import main as poseidon
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "./common/casts/u32_array_to_field.zok" import main as u32_array_to_field
from "utils/pack/bool/pack256.zok" import main as bool_256_to_field
from "./common/merkle-tree/mimc/altbn254/verify-membership/height32.zok" import main as checkRoot

def main(\
	public field j,\
	private u32[8] z_oldCommitment_owner_secretKey,\
	public field z_oldCommitment_nullifier,\
	private  field z_oldCommitment_value,\
	private field z_oldCommitment_salt_field,\
	private bool z_oldCommitment_isDummy,\
	public field commitmentRoot,\
	private field z_oldCommitment_membershipWitness_index,\
	private field[32] z_oldCommitment_membershipWitness_siblingPath,\
	private field z_newCommitment_owner_publicKey_field,\
	private field z_newCommitment_salt_field,\
	public field z_newCommitment_commitment\
) -> (bool):

        
        // We need to hard-code each stateVarId into the circuit:
        field z_stateVarId_field = 3


        field z = z_oldCommitment_value

for u32 i in 0..5 do
        for u32 k in 0..2 do
        z = z + j
        endfor
        endfor


        // z_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        u32[8] z_oldCommitment_owner_publicKey = sha256Padded(u32_8_to_bool_256(z_oldCommitment_owner_secretKey))


        // Nullify z:

        field z_oldCommitment_owner_secretKey_field =u32_array_to_field(z_oldCommitment_owner_secretKey)

        field z_oldCommitment_nullifier_check_field = poseidon([\
          z_stateVarId_field,\
          z_oldCommitment_owner_secretKey_field,\
          z_oldCommitment_salt_field\
        ])

        assert(\
        field_to_bool_256(z_oldCommitment_nullifier)[8..256] == field_to_bool_256(z_oldCommitment_nullifier_check_field)[8..256]\
        )


        // z_oldCommitment_commitment: preimage check

        field z_oldCommitment_owner_publicKey_field =u32_array_to_field(z_oldCommitment_owner_publicKey)


        field z_oldCommitment_commitment_field = poseidon([\
          z_stateVarId_field,\
          z_oldCommitment_value,\
          z_oldCommitment_owner_publicKey_field,\
          z_oldCommitment_salt_field\
        ])


        // z_oldCommitment_commitment: existence check


        field z_commitmentRoot_check = checkRoot(\
          z_oldCommitment_membershipWitness_siblingPath,\
          z_oldCommitment_commitment_field,\
          z_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        z_commitmentRoot_check = if z_oldCommitment_isDummy == true then commitmentRoot else z_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(z_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'z' for commitment

        field z_newCommitment_value_field = z

        // z_newCommitment_commitment - preimage check

        field z_newCommitment_commitment_check_field = poseidon([\
          z_stateVarId_field,\
          z_newCommitment_value_field,\
          z_newCommitment_owner_publicKey_field,\
          z_newCommitment_salt_field\
        ])

        assert(\
          field_to_bool_256(z_newCommitment_commitment)[8..256] == field_to_bool_256(z_newCommitment_commitment_check_field)[8..256]\
        )

         return true
        
from "ecc/babyjubjubParams" import BabyJubJubParams;
from "ecc/babyjubjubParams" import main as curveParams;
from "ecc/edwardsScalarMult" import main as scalarMult;
from "utils/casts/u32_to_field" import main as u32_to_field;
from "hashes/poseidon/poseidon.zok" import main as poseidon;

struct EncryptedMsgs<N> {
    field[N] cipherText;
    field[2] ephemeralPublicKey;
}

const field DOMAIN_KEM = 10f;

const field DOMAIN_DEM = 20f;

def kem(bool[256] mut ephemeralKey, field[2] recipientPub) -> field {
    BabyJubJubParams mut context = curveParams();
    field[2] mut g = [context.Gu, context.Gv];
    field[2] mut sharedSecret = scalarMult(ephemeralKey, recipientPub, context);
    field mut encryptionKey = poseidon([sharedSecret[0], sharedSecret[1], DOMAIN_KEM]);
    return encryptionKey;
}

def dem<N>(field mut encryptionKey, field[N] plainText) -> field[N] {
    field[N] mut output = [0; N];
    for u32 i in 0..N {
        output[i] = poseidon([encryptionKey, DOMAIN_DEM, u32_to_field(i)]) + plainText[i];
    }
    return output;
}

def main<N>(bool[256] mut ephemeralKey, field[2] recipientPub, field[N] plainText) -> EncryptedMsgs<N> {
    BabyJubJubParams mut context = curveParams();
    field[2] mut g = [context.Gu, context.Gv];
    field[2] mut ephemeralPub = scalarMult(ephemeralKey, g, context);

    field mut encryptionKey = kem(ephemeralKey, recipientPub);

    field[N] mut cipherText = dem(encryptionKey, plainText);
    EncryptedMsgs<N> mut e = EncryptedMsgs { cipherText: cipherText, ephemeralPublicKey: ephemeralPub };
    return e;
}

from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "utils/pack/bool/pack256.zok" import main as bool_256_to_field
from "utils/pack/u32/nonStrictUnpack256.zok" import main as field_to_u32_8
from "utils/pack/u32/unpack256ToBits.zok" import main as u32_8_to_bool_256
from "utils/pack/u32/pack256.zok"  import main as u32_8_to_field

from "./common/merkle-tree/mimc/bn254/verify-membership/height32.zok" import main as checkRoot
from "./common/hashes/sha256/pad256ThenHash.zok" import main as sha256of256
from "./common/hashes/sha256/pad512ThenHash.zok" import main as sha256of512

def main(\
	private field value,\
	private u32[8] a_oldCommitment_privateState,\
	private u32[8] a_oldCommitment_salt,\
	private field a_oldCommitment_membershipWitness_index,\
	private field[32] a_oldCommitment_membershipWitness_siblingPath,\
	field a_oldCommitment_nullifier,\
	private u32[8] a_newCommitment_privateState,\
	private u32[8] a_newCommitment_salt,\
	field a_newCommitment_commitment,\
	field commitmentRoot\
) -> ():

	// TODO: make this a VariableDeclaration - find the first reference to `a` in the function in the tree.
	field a = value

	// prepare secret states for commitment

	a_newCommitment_privateState = field_to_u32_8(a)

	// distinguish between the first and subsequent commitments

	bool skipNullification = if a_oldCommitment_nullifier == 0 && commitmentRoot == 0 then true else false fi

	// old commitments - nullify

	u32[8] a_oldCommitment_nullifier_check = if skipNullification == true then [0x00000000; 8] else sha256of256(a_oldCommitment_salt) fi

	assert(\
		field_to_bool_256(a_oldCommitment_nullifier)[8..256] == u32_8_to_bool_256(a_oldCommitment_nullifier_check)[8..256]\
	)

	// old commitments - preimage checks

	u32[8] a_oldCommitment_commitment = if skipNullification == true then [0x00000000; 8] else sha256of512([...a_oldCommitment_privateState, ...a_oldCommitment_salt]) fi

	// old commitments - existence checks

	field a_oldCommitment_commitment_truncated = bool_256_to_field([...[false; 8], ...u32_8_to_bool_256(a_oldCommitment_commitment)[8..256]])

	field commitmentRoot_check = if skipNullification == true then 0 else  checkRoot(a_oldCommitment_membershipWitness_siblingPath, a_oldCommitment_commitment_truncated, a_oldCommitment_membershipWitness_index) fi

	assert(\
		field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(commitmentRoot_check)[8..256]\
	)

	// new commitments - preimage checks

	u32[8] a_newCommitment_commitment_check = sha256of512([...a_newCommitment_privateState, ...a_newCommitment_salt])

	assert(\
		field_to_bool_256(a_newCommitment_commitment)[8..256] == u32_8_to_bool_256(a_newCommitment_commitment_check)[8..256]\
	)

	return

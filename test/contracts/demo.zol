// SPDX-License-Identifier: CC0
pragma solidity ^0.8.0;
contract PriceTierDemo {

        address private  contractOwner;

        struct Invoice {
            uint256[3] sku;
            uint256[3] quantity;
            uint256[3] subTotal;
            bool isPaid;
        }

       

        struct PriceTierItem {
            uint256[3] minQuantity;
            uint256[3] price;
        }

        


        struct Buyer{
            address buyer;
        }

        secret mapping (uint256 => PriceTierItem) private assetPriceTiers;
        secret mapping (uint256 => uint256) private orderedQuantities;
        mapping(address => address) private buyers;
        address private seller;

        

        struct PurchaseOrder {
            uint256[3] sku;
            uint256[3] quantity;
        }

       

        secret mapping (uint256 => PurchaseOrder) private purchaseOrders; 
        secret mapping (uint256 => Invoice) private invoices; 

       

        modifier onlyBuyer() {
            require(buyers[msg.sender] == msg.sender, "Caller is unauthorised, it must be a buyer");
            _;
        }

        modifier onlySeller() {
            require(msg.sender == seller, "Caller is unauthorised, it must be a seller");
            _;
        }

        
        constructor() {
            contractOwner = msg.sender;
        }

        
    

        function addPriceTierItem(secret uint256 sku, secret PriceTierItem calldata _priceTierItem) public onlySeller {
                assetPriceTiers[sku] = _priceTierItem;
            }

        function addSeller(address _seller) public onlySeller {
            seller = _seller;
        }
        
        function addBuyers(address _buyers) public onlySeller {
            buyers[_buyers] = _buyers;
        }

        




        function raisePO(secret PurchaseOrder calldata order, secret uint256 purchaseOrderId) public onlyBuyer { 
            purchaseOrders[purchaseOrderId] = order;
        }
        

        function raiseInvoice(secret Invoice calldata invoice, secret uint256 purchaseOrderId) public onlySeller { 
            // Seller raise Invoice
            secret PurchaseOrder memory po = purchaseOrders[purchaseOrderId];
            for (uint256 index = 0; index < 3; index++) {
                uint256 sku = invoice.sku[index];
                require(po.quantity[index] == invoice.quantity[index], "Invoice quantity does not match with PO");
                require(po.sku[index] == sku, "Invoice sku does not match with PO");
                orderedQuantities[sku] += invoice.quantity[index];
            }
            invoices[purchaseOrderId] = invoice;
        }

        
       
}